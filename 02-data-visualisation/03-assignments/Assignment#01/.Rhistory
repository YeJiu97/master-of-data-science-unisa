# load dataset
beer_df <- read_csv("beer.csv")
getwd()
mpg_df <- mpg_df
mpg_df <- mpg
mpg_df <- mgp
library(ggplot2)
mpg_df <- mpg
?mpg
head(mpg)
mpg$model
library(dplyr)
getwd()
library(tidyverse)
beer <- read.csv("wber9.csv")
library(tidyverse)
beer <- read.csv("wber9.csv")
getwd()
getwd
getwd()
dates <- c(30829, 38540)
library(ggplot2)
# create sample data
df <- data.frame(x = c(1, 2, 3, 4, 5),
y = c(0.1, 0.3, 0.5, 0.7, 0.9))
# plot the data
ggplot(df, aes(x = x, y = y)) +
geom_point(size = 2) +
geom_line() +
scale_x_continuous(limits = c(0, 6), breaks = seq(0, 6, 1)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
labs(x = "X Axis Label", y = "Y Axis Label", title = "Title") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
legend.position = "none")
1 + 2
2 * 3
3 + 9
((2 + 3) * 6 - 2) ^ 2 / 1.5
# load data set first
heart.full <- read.csv("heart.csv")
# then check the data set
str(heart.full)
sum(is.na(heart.full))
# convert age, trestbps, chol, thalach, and oldpeak to numeric
heart.full$age <- as.numeric(heart.full$age)
heart.full$trestbps <- as.numeric(heart.full$trestbps)
heart.full$chol <- as.numeric(heart.full$chol)
heart.full$thalach <- as.numeric(heart.full$thalach)
heart.full$oldpeak <- as.numeric(heart.full$oldpeak)
# 问题一：是否需要将这些也转换为 numeric
heart.full$sex <- as.numeric(heart.full$sex)
heart.full$cp <- as.numeric(heart.full$cp)
heart.full$restecg <- as.numeric(heart.full$restecg)
heart.full$slope <- as.numeric(heart.full$slope)
heart.full$restwm <- as.numeric(heart.full$restwm)
heart.full$target <- as.numeric(heart.full$target)
# 还是说将其转换为factor
# convert sex, cp, restecg, slope, restwm, and target to factor
# heart.full$sex <- as.factor(heart.full$sex)
# heart.full$cp <- as.factor(heart.full$cp)
# heart.full$restecg <- as.factor(heart.full$restecg)
# heart.full$slope <- as.factor(heart.full$slope)
# heart.full$restwm <- as.factor(heart.full$restwm)
# heart.full$target <- as.factor(heart.full$target)
# calculate the correlation matrix
# 如果是转换为factor，则采用这一段代码
cor.matrix <- cor(heart.full[, c("age", "trestbps", "chol", "thalach", "oldpeak", "major_vessels")])  # 'x'必需为数值
cor.matrix
# 如果是转换为numeric，则采用这一段代码
cor.matrix.numeric <- cor(heart.full)
cor.matrix.numeric
library(corrplot)
corrplot(cor.matrix, method = "color")
# data set for each gender
heart.male <- subset(heart.full, sex == "male")
heart.female <- subset(heart.full, sex == "female")
# Random forest for male subset
library(randomForest)
set.seed(123)
rf_model_male <- randomForest(target ~ ., data = heart.male, importance = TRUE, ntree = 500)
# load data set first
heart.full <- read.csv("heart.csv")
# then check the data set
str(heart.full)
sum(is.na(heart.full))
# convert age, trestbps, chol, thalach, and oldpeak to numeric
heart.full$age <- as.numeric(heart.full$age)
heart.full$trestbps <- as.numeric(heart.full$trestbps)
heart.full$chol <- as.numeric(heart.full$chol)
heart.full$thalach <- as.numeric(heart.full$thalach)
heart.full$oldpeak <- as.numeric(heart.full$oldpeak)
# 问题一：是否需要将这些也转换为 numeric
# heart.full$sex <- as.numeric(heart.full$sex)
# heart.full$cp <- as.numeric(heart.full$cp)
# heart.full$restecg <- as.numeric(heart.full$restecg)
# heart.full$slope <- as.numeric(heart.full$slope)
# heart.full$restwm <- as.numeric(heart.full$restwm)
# heart.full$target <- as.numeric(heart.full$target)
# 还是说将其转换为factor
# convert sex, cp, restecg, slope, restwm, and target to factor
heart.full$sex <- as.factor(heart.full$sex)
heart.full$cp <- as.factor(heart.full$cp)
heart.full$restecg <- as.factor(heart.full$restecg)
heart.full$slope <- as.factor(heart.full$slope)
heart.full$restwm <- as.factor(heart.full$restwm)
heart.full$target <- as.factor(heart.full$target)
# calculate the correlation matrix
# 如果是转换为factor，则采用这一段代码
cor.matrix <- cor(heart.full[, c("age", "trestbps", "chol", "thalach", "oldpeak", "major_vessels")])  # 'x'必需为数值
cor.matrix
# 如果是转换为numeric，则采用这一段代码
cor.matrix.numeric <- cor(heart.full)
# 如果是转换为numeric，则采用这一段代码
# cor.matrix.numeric <- cor(heart.full)
# cor.matrix.numeric
library(corrplot)
corrplot(cor.matrix, method = "color")
# data set for each gender
heart.male <- subset(heart.full, sex == "male")
heart.female <- subset(heart.full, sex == "female")
# Random forest for male subset
library(randomForest)
set.seed(123)
rf_model_male <- randomForest(target ~ ., data = heart.male, importance = TRUE, ntree = 500)
importance(rf_model_male)
varImpPlot(rf_model_male, col = "red", pch = 20)
# Random forest for female subset
set.seed(123)
rf_model_female <- randomForest(target ~ ., data = heart.female, importance = TRUE, ntree = 500)
importance(rf_model_female)
varImpPlot(rf_model_female, col = "red", pch = 20)
# Random forest for female subset
set.seed(123)
rf_model_female <- randomForest(target ~ ., data = heart.female, importance = TRUE, ntree = 500)
importance(rf_model_female)
varImpPlot(rf_model_female, col = "red", pch = 20)
varImpPlot(rf_model_male, col = "red", pch = 20)
# Random forest for male subset
library(randomForest)
set.seed(123)
rf_model_male <- randomForest(target ~ ., data = heart.male, importance = TRUE, ntree = 500)
importance(rf_model_male)
# load dataset first
heart.full <- read.csv("heart.csv")
# then check the dataset
str(heart.full)
sum(is.na(heart.full))
# convert age, trestbps, chol, thalach, and oldpeak to numeric
heart.full$age <- as.numeric(heart.full$age)
heart.full$trestbps <- as.numeric(heart.full$trestbps)
heart.full$chol <- as.numeric(heart.full$chol)
heart.full$thalach <- as.numeric(heart.full$thalach)
heart.full$oldpeak <- as.numeric(heart.full$oldpeak)
# convert sex, cp, restecg, slope, restwm, and target to factor
heart.full$sex <- as.factor(heart.full$sex)
heart.full$cp <- as.factor(heart.full$cp)
heart.full$restecg <- as.factor(heart.full$restecg)
heart.full$slope <- as.factor(heart.full$slope)
heart.full$restwm <- as.factor(heart.full$restwm)
heart.full$target <- as.factor(heart.full$target)
# dataset for each gender
heart.male <- subset(heart.full, sex == "male")
heart.female <- subset(heart.full, sex == "female")
# Random forest for male subset
library(randomForest)
set.seed(123)
rf_model_male <- randomForest(target ~ ., data = heart.male, importance = TRUE, ntree = 500)
importance(rf_model_male)
varImpPlot(rf_model_male, col = "red", pch = 20)
# Random forest for female subset
set.seed(123)
rf_model_female <- randomForest(target ~ ., data = heart.female, importance = TRUE, ntree = 500)
importance(rf_model_female)
varImpPlot(rf_model_female, col = "red", pch = 20)
# Create new dataset with selected features and target variable
heart_features_selected <- heart.full[, c("id", "age", "sex", "cp", "thalach", "exang", "oldpeak", "major_vessels", "restwm", "target")]
# Save new dataset as CSV file
write.csv(heart_features_selected, "heart_features_selected.csv", row.names = FALSE)
library(tidyverse)
heart.selected$id <- as.numeric(heart.selected$id)
library(tidyverse)
heart.selected$id <- as.numeric(heart.selected$id)
heart.selected <- read.csv("heart_features_selected.csv")
str(heart.selected)
library(tidyverse)
heart.selected$id <- as.numeric(heart.selected$id)
heart.selected$age <- as.numeric(heart.selected$age)
heart.selected$sex <- as.factor(heart.selected$sex)
heart.selected$cp <- as.factor(heart.selected$cp)
heart.selected$thalach <- as.numeric(heart.selected$thalach)
heart.selected$oldpeak <- as.numeric(heart.selected$oldpeak)
heart.selected$major_vessels <- as.numeric(heart.selected$major_vessels)
heart.selected$target <- as.factor(heart.selected$target)
summary(heart.selected[, -1])
library(psych)
describe(heart.selected[, -1])
View(heart.full)
View(heart.full)
View(heart.selected)
library(psych)
describe(heart.selected[, -1])
par(mfrow=c(1,2)) # To plot the histograms side by side
hist(heart.selected$age[heart.selected$sex == "male"], main = "Age Distribution for Males")
hist(heart.selected$age[heart.selected$sex == "female"], main = "Age Distribution for Females")
par(mfrow=c(1,2)) # To plot the histograms side by side
hist(heart.selected$age[heart.selected$sex == "male"], main = "Age Distribution for Males", xlab = "Age for male")
hist(heart.selected$age[heart.selected$sex == "female"], main = "Age Distribution for Females", xlab = "Age for female")
boxplot(heart.selected$age ~ heart.selected$target,
main="Heart disease diagnosis distribution by Age",
ylab="Age",xlab="Heart disease diagnosed")
ggplot(heart.selected, aes(x = target, y = age, fill = sex)) +
geom_boxplot() +
labs(title = "Heart disease diagnosis distribution by Age and Gender",
x = "Heart disease diagnosed",
y = "Age") +
scale_fill_discrete(name = "Sex",
labels = c("Female", "Male")) +
theme_minimal()
ggplot(data = heart.selected, aes(x = target, fill = cp)) +
geom_bar(position = "fill") +
labs(title = "Heart disease diagnosis Distributions by Chest pain",
x = "Heart disease diagnosis",
y = "chest pain") +
theme_test()
# Create barplot by chest pain and gender
ggplot(heart.selected, aes(x = target, fill = cp)) +
geom_bar(position = "fill") +
facet_wrap(~sex) +
labs(title = "Heart disease diagnosis Distributions by Chest pain",
x = "Heart disease diagnosis",
y = "chest pain") +
scale_fill_discrete(name = "Chest Pain") +
theme_test()
mosaicplot(heart.selected$sex ~ heart.selected$target,
main="Heart disease outcome by Gender", shade=FALSE,color=TRUE,
xlab="Gender", ylab="Heart disease")
# Exploratory data analysis of thalach
ggplot(data = heart.selected, aes(x = thalach)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Distribution of Maximum Heart Rate Achieved",
x = "Maximum Heart Rate Achieved", y = "Frequency")
# Exploratory data analysis of thalach
ggplot(data = heart.selected, aes(x = thalach)) +
geom_histogram(bins = 30, fill = "black", color = "black") +
labs(title = "Distribution of Maximum Heart Rate Achieved",
x = "Maximum Heart Rate Achieved", y = "Frequency")
# Exploratory data analysis of thalach
ggplot(data = heart.selected, aes(x = thalach)) +
geom_histogram(bins = 30, fill = "green", color = "black") +
labs(title = "Distribution of Maximum Heart Rate Achieved",
x = "Maximum Heart Rate Achieved", y = "Frequency")
# Exploratory data analysis of thalach
ggplot(data = heart.selected, aes(x = thalach)) +
geom_histogram(bins = 30, fill = "red", color = "black") +
labs(title = "Distribution of Maximum Heart Rate Achieved",
x = "Maximum Heart Rate Achieved", y = "Frequency")
# Exploratory data analysis of thalach
ggplot(data = heart.selected, aes(x = thalach)) +
geom_histogram(bins = 30, fill = "purple", color = "black") +
labs(title = "Distribution of Maximum Heart Rate Achieved",
x = "Maximum Heart Rate Achieved", y = "Frequency")
# Relationship between thalach and target
ggplot(data = heart.selected, aes(x = thalach, fill = target)) +
geom_density(alpha = 0.5) +
labs(title = "Relationship between Maximum Heart Rate Achieved and Heart Disease Diagnosis",
x = "Maximum Heart Rate Achieved", y = "Density", fill = "Diagnosis") +
scale_fill_manual(values = c("red", "green"))
mosaicplot(heart.selected$sex ~ heart.selected$target,
main="Heart disease outcome by Gender", shade=FALSE,color=TRUE,
xlab="Gender", ylab="Heart disease")
mosaicplot(heart.selected$sex ~ heart.selected$target,
main="Heart disease outcome by Gender", shade=FALSE,color=TRUE,
xlab="Gender", ylab="Heart disease")
# Relationship between thalach and target divided into gender
ggplot(data = heart.selected, aes(x = thalach, fill = target)) +
geom_density(alpha = 0.5) +
labs(title = "Relationship between Maximum Heart Rate Achieved and Heart Disease Diagnosis by Gender",
x = "Maximum Heart Rate Achieved", y = "Density", fill = "Diagnosis") +
scale_fill_manual(values = c("red", "green")) +
facet_wrap(~ sex)
boxplot(heart.selected$thalach ~ heart.selected$target,
main="Heart disease diagnosis distribution by Thalach",
ylab="Thalach",xlab="Heart disease diagnosed")
# calculate the correlation matrix
# if convert to factor
heart.selected$age <- as.numeric(heart.selected$age)
heart.selected$thalach <- as.numeric(heart.selected$thalach)
heart.selected$oldpeak <- as.numeric(heart.selected$oldpeak)
heart.selected$major_vessels <- as.numeric(heart.selected$major_vessels)
cor.matrix <- cor(heart.selected[, c("age",  "thalach", "oldpeak", "major_vessels")])
cor.matrix
# calculate the correlation matrix
# if convert to factor
heart.selected$age <- as.numeric(heart.selected$age)
heart.selected$thalach <- as.numeric(heart.selected$thalach)
heart.selected$oldpeak <- as.numeric(heart.selected$oldpeak)
heart.selected$major_vessels <- as.numeric(heart.selected$major_vessels)
cor.matrix <- cor(heart.selected[, c("age",  "thalach", "oldpeak", "major_vessels")])
cor.matrix
corrplot(cor.matrix)
# calculate the correlation matrix
library(corrplot)
heart.selected$age <- as.numeric(heart.selected$age)
heart.selected$thalach <- as.numeric(heart.selected$thalach)
heart.selected$oldpeak <- as.numeric(heart.selected$oldpeak)
heart.selected$major_vessels <- as.numeric(heart.selected$major_vessels)
cor.matrix <- cor(heart.selected[, c("age",  "thalach", "oldpeak", "major_vessels")])
cor.matrix
# calculate the correlation matrix
library(corrplot)
heart.selected$age <- as.numeric(heart.selected$age)
heart.selected$thalach <- as.numeric(heart.selected$thalach)
heart.selected$oldpeak <- as.numeric(heart.selected$oldpeak)
heart.selected$major_vessels <- as.numeric(heart.selected$major_vessels)
cor.matrix <- cor(heart.selected[, c("age",  "thalach", "oldpeak", "major_vessels")])
cor.matrix
corrplot(cor.matrix)
# load dataset first
heart.full <- read.csv("heart.csv")
# then check the dataset
str(heart.full)
sum(is.na(heart.full))
# convert age, trestbps, chol, thalach, and oldpeak to numeric
heart.full$age <- as.numeric(heart.full$age)
heart.full$trestbps <- as.numeric(heart.full$trestbps)
heart.full$chol <- as.numeric(heart.full$chol)
heart.full$thalach <- as.numeric(heart.full$thalach)
heart.full$oldpeak <- as.numeric(heart.full$oldpeak)
# convert sex, cp, restecg, slope, restwm, and target to factor
heart.full$sex <- as.factor(heart.full$sex)
heart.full$cp <- as.factor(heart.full$cp)
heart.full$restecg <- as.factor(heart.full$restecg)
heart.full$slope <- as.factor(heart.full$slope)
heart.full$restwm <- as.factor(heart.full$restwm)
heart.full$target <- as.factor(heart.full$target)
# dataset for each gender
heart.male <- subset(heart.full, sex == "male")
heart.female <- subset(heart.full, sex == "female")
# Random forest for male subset
library(randomForest)
set.seed(123)
rf_model_male <- randomForest(target ~ ., data = heart.male, importance = TRUE, ntree = 500)
importance(rf_model_male)
varImpPlot(rf_model_male, col = "red", pch = 20)
# Random forest for female subset
set.seed(123)
rf_model_female <- randomForest(target ~ ., data = heart.female, importance = TRUE, ntree = 500)
importance(rf_model_female)
varImpPlot(rf_model_female, col = "red", pch = 20)
# Create new dataset with selected features and target variable
heart_features_selected <- heart.full[, c("id", "age", "sex", "cp", "thalach", "exang", "oldpeak", "major_vessels", "restwm", "target")]
# Save new dataset as CSV file
write.csv(heart_features_selected, "heart_features_selected.csv", row.names = FALSE)
heart.selected <- read.csv("heart_features_selected.csv")
str(heart.selected)
library(tidyverse)
heart.selected$id <- as.numeric(heart.selected$id)
heart.selected$age <- as.numeric(heart.selected$age)
heart.selected$sex <- as.factor(heart.selected$sex)
heart.selected$cp <- as.factor(heart.selected$cp)
heart.selected$thalach <- as.numeric(heart.selected$thalach)
heart.selected$oldpeak <- as.numeric(heart.selected$oldpeak)
heart.selected$major_vessels <- as.numeric(heart.selected$major_vessels)
heart.selected$target <- as.factor(heart.selected$target)
summary(heart.selected[, -1])
library(psych)
describe(heart.selected[, -1])
par(mfrow=c(1,2)) # To plot the histograms side by side
hist(heart.selected$age[heart.selected$sex == "male"], main = "Age Distribution for Males", xlab = "Age for male")
hist(heart.selected$age[heart.selected$sex == "female"], main = "Age Distribution for Females", xlab = "Age for female")
boxplot(heart.selected$age ~ heart.selected$target,
main="Heart disease diagnosis distribution by Age",
ylab="Age",xlab="Heart disease diagnosed")
ggplot(heart.selected, aes(x = target, y = age, fill = sex)) +
geom_boxplot() +
labs(title = "Heart disease diagnosis distribution by Age and Gender",
x = "Heart disease diagnosed",
y = "Age") +
scale_fill_discrete(name = "Sex",
labels = c("Female", "Male")) +
theme_minimal()
ggplot(data = heart.selected, aes(x = target, fill = cp)) +
geom_bar(position = "fill") +
labs(title = "Heart disease diagnosis Distributions by Chest pain",
x = "Heart disease diagnosis",
y = "chest pain") +
theme_test()
mosaicplot(heart.selected$sex ~ heart.selected$target,
main="Heart disease outcome by Gender", shade=FALSE,color=TRUE,
xlab="Gender", ylab="Heart disease")
# Create barplot by chest pain and gender
ggplot(heart.selected, aes(x = target, fill = cp)) +
geom_bar(position = "fill") +
facet_wrap(~sex) +
labs(title = "Heart disease diagnosis Distributions by Chest pain",
x = "Heart disease diagnosis",
y = "chest pain") +
scale_fill_discrete(name = "Chest Pain") +
theme_test()
# Exploratory data analysis of thalach
ggplot(data = heart.selected, aes(x = thalach)) +
geom_histogram(bins = 30, fill = "purple", color = "black") +
labs(title = "Distribution of Maximum Heart Rate Achieved",
x = "Maximum Heart Rate Achieved", y = "Frequency")
boxplot(heart.selected$thalach ~ heart.selected$target,
main="Heart disease diagnosis distribution by Thalach",
ylab="Thalach",xlab="Heart disease diagnosed")
# Relationship between thalach and target
ggplot(data = heart.selected, aes(x = thalach, fill = target)) +
geom_density(alpha = 0.5) +
labs(title = "Relationship between Maximum Heart Rate Achieved and Heart Disease Diagnosis",
x = "Maximum Heart Rate Achieved", y = "Density", fill = "Diagnosis") +
scale_fill_manual(values = c("red", "green"))
# Relationship between thalach and target divided into gender
ggplot(data = heart.selected, aes(x = thalach, fill = target)) +
geom_density(alpha = 0.5) +
labs(title = "Relationship between Maximum Heart Rate Achieved and Heart Disease Diagnosis by Gender",
x = "Maximum Heart Rate Achieved", y = "Density", fill = "Diagnosis") +
scale_fill_manual(values = c("red", "green")) +
facet_wrap(~ sex)
# calculate the correlation matrix
library(corrplot)
heart.selected$age <- as.numeric(heart.selected$age)
heart.selected$thalach <- as.numeric(heart.selected$thalach)
heart.selected$oldpeak <- as.numeric(heart.selected$oldpeak)
heart.selected$major_vessels <- as.numeric(heart.selected$major_vessels)
cor.matrix <- cor(heart.selected[, c("age",  "thalach", "oldpeak", "major_vessels")])
cor.matrix
corrplot(cor.matrix)
data(iris)
iris_cluster <- iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
# specify the number of clusters
k <- 3
# run k-means clustering algorithm
kmeans_result <- kmeans(iris_cluster, k)
# print the cluster assignments
kmeans_result$cluster
# plot the clusters
library(ggplot2)
ggplot(iris_cluster, aes(x=Petal.Length, y=Petal.Width, color=factor(kmeans_result$cluster))) +
geom_point(size=3) +
labs(color="Cluster")
# Load the Iris dataset
data(iris)
# Extract the first two columns (sepal length and sepal width)
iris_features <- iris[,1:2]
# Normalize the data
iris_norm <- scale(iris_features)
# Perform k-means clustering with k=2
kmeans_result <- kmeans(iris_norm, centers=2)
# Plot the clusters
library(ggplot2)
iris_cluster <- data.frame(iris_norm, cluster=kmeans_result$cluster)
ggplot(iris_cluster, aes(x=Sepal.Length, y=Sepal.Width, color=factor(kmeans_result$cluster))) +
geom_point(size=3) +
labs(color="Cluster")
Sys.getlocale()
Sys.setlocale("LC_ALL","English")
Sys.setenv(LANG = "en_US.UTF-8")
library(ggplot2)
library(lubridate)
country_vaccinations_clean$date <- ymd(country_vaccinations_clean$date)
# Load required libraries
library(tidyverse)
# Import the "country_vaccinations.csv" dataset
country_vaccinations <- read.csv("country_vaccinations.csv")
library(ggplot2)
library(lubridate)
country_vaccinations_clean$date <- ymd(country_vaccinations_clean$date)
library(ggplot2)
library(lubridate)
country_vaccinations_clean$date <- ymd(country_vaccinations_clean$date)
# Load required libraries
library(tidyverse)
# Import the "country_vaccinations.csv" dataset
country_vaccinations <- read.csv("country_vaccinations.csv")
setwd("C:\\Users\\yinia\\OneDrive\\MasterOfDataScience\\02-DataVisualisation\\Assignments\\Assignment#01")
# Load required libraries
library(tidyverse)
# Import the "country_vaccinations.csv" dataset
country_vaccinations <- read.csv("country_vaccinations.csv")
# Import the "country_vaccinations_by_manufacturer.csv" dataset
country_vaccinations_by_manufacturer <- read.csv("country_vaccinations_by_manufacturer.csv")
# summary
summary(country_vaccinations)
# drop
country_vaccinations_clean <- na.omit(country_vaccinations)
library(ggplot2)
library(lubridate)
country_vaccinations_clean$date <- ymd(country_vaccinations_clean$date)
# Subset data to include only relevant variables
vaccinations <- country_vaccinations_clean %>%
filter(country %in% c("United States", "China", "India", "Brazil", "Russia")) %>%
select(country, date, daily_vaccinations, vaccines)
# Group data by country and date to calculate the mean daily vaccinations
vaccinations_by_country <- vaccinations %>%
group_by(country, date) %>%
summarise(mean_daily_vaccinations = mean(daily_vaccinations, na.rm = TRUE)) %>%
ungroup()
# Plot mean daily vaccinations by country and date
ggplot(vaccinations_by_country, aes(x = date, y = mean_daily_vaccinations, color = country)) +
geom_line() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(x = "Date", y = "Mean Daily Vaccinations", title = "COVID-19 Vaccinations by Country") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
