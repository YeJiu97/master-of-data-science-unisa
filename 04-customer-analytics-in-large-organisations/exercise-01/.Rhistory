View(clogout1)
colnames(clogout1)
colnames(dataset1)
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("region_B", "region_c", "More", "Most", "More:Most"),
confidence.level = 0.90, seed = 987)
dataset1
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("region_B", "region_c", "More", "Most", "More:Most"),
confidence.level = 0.90, seed = 987)
# 获取模型系数的名称
coef_names <- names(coef(clogout1))
# 检查非货币变量的名称是否在模型系数中
nonmonetary.variables <- c("region_B", "region_c", "More", "Most", "More:Most")
nonmonetary.index <- vector("numeric", length = length(nonmonetary.variables))
for (i in seq_along(nonmonetary.variables)) {
nonmonetary.index[i] <- which(coef_names == nonmonetary.variables[i])
}
# 获取模型系数的名称
coef_names <- names(coef(clogout1))
coef_names
# 检查非货币变量的名称是否在模型系数中
nonmonetary.variables <- c("region_B", "region_c", "More", "Most", "More:Most")
nonmonetary.index <- vector("numeric", length = length(nonmonetary.variables))
for (i in seq_along(nonmonetary.variables)) {
nonmonetary.index[i] <- which(coef_names == nonmonetary.variables[i])
}
nonmonetary.variables
# 检查非货币变量的名称是否在模型系数中
nonmonetary.variables <- c("region_B", "region_c", "More", "Most", "More,Most")
nonmonetary.index <- vector("numeric", length = length(nonmonetary.variables))
for (i in seq_along(nonmonetary.variables)) {
nonmonetary.index[i] <- which(coef_names == nonmonetary.variables[i])
}
coef_names <- names(coef(clogout1))
# 检查非货币变量的名称是否在模型系数中
nonmonetary.variables <- c("region_B", "region_c", "More", "Most", "More,Most")
nonmonetary.index <- vector("numeric", length = length(nonmonetary.variables))
for (i in seq_along(nonmonetary.variables)) {
nonmonetary.index[i] <- which(coef_names == nonmonetary.variables[i])
}
# 获取模型系数的名称
coef_names <- names(coef(clogout1))
# 检查非货币变量的名称是否在模型系数中
nonmonetary.variables <- c("region_B", "region_c", "More", "Most", "More,Most")
nonmonetary.index <- vector("numeric", length = length(nonmonetary.variables))
for (i in seq_along(nonmonetary.variables)) {
index <- which(coef_names == nonmonetary.variables[i])
if (length(index) > 0) {
nonmonetary.index[i] <- index
} else {
warning(paste("Coefficient for", nonmonetary.variables[i], "not found."))
}
}
nonmonetary.index
# 获取模型系数的名称
coef_names <- names(coef(clogout1))
# 检查非货币变量的名称是否在模型系数中
nonmonetary.variables <- c("region_B", "region_c", "More", "Most", "More,Most")
nonmonetary.index <- vector("numeric", length = length(nonmonetary.variables))
for (i in seq_along(nonmonetary.variables)) {
index <- which(coef_names == nonmonetary.variables[i])
if (length(index) > 0) {
nonmonetary.index[i] <- index
} else {
warning(paste("Coefficient for", nonmonetary.variables[i], "not found."))
}
}
nonmonetary.index
# 使用 mwtp 函数计算边际意愿支付
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("region_B", "region_c", "More", "Most", "More:Most"),
confidence.level = 0.90, seed = 987)
# Factorials / Permutations / Combinations
expand.grid(1:16, 1:16)
# binom coef (n, k) =  n! / (k! * (n-k)!)
factorial(16)/(factorial(14) * factorial(2))
choose(16, 2)
t(combn(1:16, 2))
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
# Nice and easy "lucky" design of 9 questions only
# Balanced fractional factorial design - every level appears the same number of times
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des1
# Assume that you want to have 8 questions only
# Unbalanced fractional factorial design tries to be as close as possible to balanced,
# however allows some levels to be more frequent than others
library(AlgDesign)
# There are three steps:
# 1. Prepare a full-factorial design for your factors and levels.
ffd <- gen.factorial(c(3,3,3), varNames = c("Region", "Eco", "Price"), factors = "all")
# 2. Extract 8 questions from the full-factorial design.
# There can be any number you need.
alt_des <- optFederov(~., ffd, 8)$design
# 3. Use the same function as before but with an extra parameter of the
# given design prepared on step 2.
des2 <- rotation.design(candidate.array = alt_des,
attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des2
####
# When you have experiment design file you can proceed as per class presentation.
questionnaire(choice.experiment.design = des1)
# or
questionnaire(choice.experiment.design = des2)
####
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1, row.renames = FALSE, randomize = TRUE, seed = 987)
questionnaire(choice.experiment.design = des1)
data("syn.res1")
syn.res1[1:3, ]
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE, categorical.attributes = c("Region", "Eco"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
dataset1 <- make.dataset(respondent.dataset = syn.res1,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
dataset1[1:10, ]
library(survival)
clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
clogout1
gofm(clogout1)
# 使用 mwtp 函数计算边际意愿支付
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("region_B", "region_c", "More", "Most", "More:Most"),
confidence.level = 0.90, seed = 987)
View(dataset1)
colnames(dataset1)
names(clogout1)
clogout1 <-
Call:
clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
data("syn.res1")
syn.res1[1:3, ]
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE, categorical.attributes = c("Region", "Eco"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
dataset1 <- make.dataset(respondent.dataset = syn.res1,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
dataset1[1:10, ]
library(survival)
colnames(dataset1)
clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
clogout1
gofm(clogout1)
# 使用 mwtp 函数计算边际意愿支付
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Reg_B", "Reg_C", "More", "Most", "More:Most"),
confidence.level = 0.90, seed = 987)
data("syn.res1")
syn.res1[1:3, ]
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE, categorical.attributes = c("Region", "Eco"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
dataset1 <- make.dataset(respondent.dataset = syn.res1,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
dataset1[1:10, ]
library(survival)
clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
clogout1
gofm(clogout1)
# 使用 mwtp 函数计算边际意愿支付
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Reg_B", "Reg_C", "More", "Most", "More:Most"),
confidence.level = 0.90, seed = 987)
# 提取模型系数
coefficients <- coef(clogout1)
# 定义非货币变量
nonmonetary.variables <- c("Reg_B", "Reg_C", "More", "Most", "More:F", "Most:F")
# 提取非货币变量的系数
nonmonetary.coefficients <- coefficients[names(coefficients) %in% nonmonetary.variables]
# 计算边际意愿支付
mwtp_values <- nonmonetary.coefficients * -1
# 打印结果
print(mwtp_values)
# 导入 readxl 包
library(readxl)
library(dplyr)
# ================= FUll text export Xlsx =============
# 读取 Excel 文件
data <- read_excel("Full text export Clone of wangjun's project.xlsx")
# 选择数据集的前12列
selected_data <- data[, 1:12]
# 查看选择的数据集结构
str(selected_data)
# 去除包含NA的行
cleaned_data <- na.omit(selected_data)
# 查看去除NA后的数据集结构
str(cleaned_data)
# ===============  Numeric export Clone of wangjun's project ========
# 读取 Excel 文件
numeric_data <- read_excel("Numeric export Clone of wangjun's project.xlsx")
# 选择数据集的前12列
selected_numeric_data <- numeric_data[, 1:12]
# 去除包含NA的行
cleaned_numeric_data <- na.omit(selected_numeric_data)
# 查看去除NA后的数据集结构
str(cleaned_numeric_data)
# 导入 readxl 包
library(readxl)
library(dplyr)
# ================= FUll text export Xlsx =============
# 读取 Excel 文件
data <- read_excel("Full text export Clone of wangjun's project.xlsx")
# 选择数据集的前12列
selected_data <- data[, 1:12]
# 查看选择的数据集结构
str(selected_data)
# 去除包含NA的行
cleaned_data <- na.omit(selected_data)
# 查看去除NA后的数据集结构
str(cleaned_data)
# ===============  Numeric export Clone of wangjun's project ========
# 读取 Excel 文件
numeric_data <- read_excel("Numeric export Clone of wangjun's project.xlsx")
# 选择数据集的前12列
selected_numeric_data <- numeric_data[, 1:12]
# 去除包含NA的行
cleaned_numeric_data <- na.omit(selected_numeric_data)
# 查看去除NA后的数据集结构
str(cleaned_numeric_data)
# 安装和加载必要的包
if(!require(glmnet)) install.packages("glmnet")
library(glmnet)
# 准备数据
# 由于glmnet要求输入为矩阵格式，我们需要将数据框转换为矩阵
X <- as.matrix(cleaned_numeric_data[, -c(1, 10:12)]) # 选择除了响应变量和人口统计学变量之外的所有变量作为自变量
y <- cleaned_numeric_data[, 1] # 响应变量
# 因为我们这里用的是数值型的响应变量，通常适合线性回归，但考虑到您的目的是逻辑回归，
# 我们需要确保响应变量是二元的。这里简化处理，确保y是二元的。
# 运行逻辑回归模型
fit <- glmnet(X, y, family = "binomial")
library(dplyr)
library(tidyr)
# 转换描述性数据为适合分析的格式
selected_data_processed <- selected_data %>%
# 使用mutate和str_extract从每个描述性选择中提取信息
mutate(
Cuisine_Type = case_when(
grepl("American Cuisine", `1. Please select your preferred choice from the options provided below:`) ~ "American",
grepl("Asian Cuisine", `1. Please select your preferred choice from the options provided below:`) ~ "Asian",
grepl("European Cuisine", `1. Please select your preferred choice from the options provided below:`) ~ "European",
TRUE ~ NA_character_
),
Distance = case_when(
grepl("Long Drive Distance", `1. Please select your preferred choice from the options provided below:`) ~ "Long",
grepl("Short Drive Distance", `1. Please select your preferred choice from the options provided below:`) ~ "Short",
grepl("Walking Distance", `1. Please select your preferred choice from the options provided below:`) ~ "Walking",
TRUE ~ NA_character_
),
Dining_Type = case_when(
grepl("delivery", `1. Please select your preferred choice from the options provided below:`) ~ "Delivery",
grepl("dining-in", `1. Please select your preferred choice from the options provided below:`) ~ "DiningIn",
grepl("take-away", `1. Please select your preferred choice from the options provided below:`) ~ "TakeAway",
TRUE ~ NA_character_
),
Price = as.numeric(gsub(".*Price : \\$(\\d+).*", "\\1", `1. Please select your preferred choice from the options provided below:`))
) %>%
# 删除原始的描述性列
select(-`1. Please select your preferred choice from the options provided below:`) %>%
# 转换为哑变量
mutate(across(c(Cuisine_Type, Distance, Dining_Type), as.factor)) %>%
dummy_cols(select_columns = c("Cuisine_Type", "Distance", "Dining_Type"))
# 检查处理后的数据
str(selected_data_processed)
library(support.CEs)
library(readxl)
library(support.CEs)
library(readxl)
# 导入excel 文件
survey <- read_excel("survey_data.xlsx")
# 导入 readxl 包
library(readxl)
library(dplyr)
# ================= FUll text export Xlsx =============
# 读取 Excel 文件
data <- read_excel("Full text export Clone of wangjun's project.xlsx")
# 选择数据集的前12列
selected_data <- data[, 1:12]
# 查看选择的数据集结构
str(selected_data)
# 去除包含NA的行
cleaned_data <- na.omit(selected_data)
# 查看去除NA后的数据集结构
str(cleaned_data)
# ===============  Numeric export Clone of wangjun's project ========
# 读取 Excel 文件
numeric_data <- read_excel("Numeric export Clone of wangjun's project.xlsx")
# 选择数据集的前12列
selected_numeric_data <- numeric_data[, 1:12]
# 去除包含NA的行
cleaned_numeric_data <- na.omit(selected_numeric_data)
# 查看去除NA后的数据集结构
str(cleaned_numeric_data)
selected_numeric_data
cleaned_numeric_data
print(cleaned_numeric_data)
cleaned_numeric_data
library(dplyr)
# 假设 cleaned_numeric_data 是你的数据集
# 创建一个新的数据框来存储处理后的数据
long_format_data <- cleaned_numeric_data %>%
mutate(question_id = row_number()) %>% # 为每个回应创建一个问题ID
gather(key = "question", value = "choice", -question_id) %>% # 将数据集转换为长格式
separate(question, into = c("question_num", "alternative"), sep = " ") %>%
mutate(
alternative = as.integer(gsub("X", "", alternative)), # 将备选方案编号转换为整数
choice = if_else(choice == alternative, 1, 0) # 创建二元变量以表示是否选择了该备选方案
)
rm(list=ls())
gc()
# Load necessary libraries
library(support.CEs)
des2 <- rotation.design(attribute.names = list(Cuisine = c("Chinese", "Indian", "Japanese"),
Delivery = c("Dining.in.", "Delivery", "Pick.up"),
Price = c("$20", "$30", "$50")),
nalternatives = 2, nblocks = 1)
questionnaire(choice.experiment.design = des2)
expand.grid(1:16, 1:16)
factorial(16)/(factorial(14) * factorial(2))
choose(16, 2)
t(combn(1:16, 2))
rm(list=ls())
gc()
library(support.CEs)
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des1
library(AlgDesign)
# 1. Prepare a full-factorial design for your factors and levels.
ffd <- gen.factorial(c(3,3,3), varNames = c("Region", "Eco", "Price"), factors = "all")
# 2. Extract 8 questions from the full-factorial design.
# There can be any number you need.
alt_des <- optFederov(~., ffd, 8)$design
# 3. Use the same function as before but with an extra parameter of the
# given design prepared on step 2.
des2 <- rotation.design(candidate.array = alt_des,
attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des2
questionnaire(choice.experiment.design = des1)
questionnaire(choice.experiment.design = des2)
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1, row.renames = FALSE, randomize = TRUE, seed = 987)
source("D:/Github/master-of-data-science-unisa/04-customer-analytics-in-large-organisations/exercise-01/week02_design.R")
# Factorials / Permutations / Combinations
expand.grid(1:16, 1:16)
# binom coef (n, k) =  n! / (k! * (n-k)!)
factorial(16)/(factorial(14) * factorial(2))
choose(16, 2)
t(combn(1:16, 2))
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
# Nice and easy "lucky" design of 9 questions only
# Balanced fractional factorial design - every level appears the same number of times
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des1
# Assume that you want to have 8 questions only
# Unbalanced fractional factorial design tries to be as close as possible to balanced,
# however allows some levels to be more frequent than others
library(AlgDesign)
# There are three steps:
# 1. Prepare a full-factorial design for your factors and levels.
ffd <- gen.factorial(c(3,3,3), varNames = c("Region", "Eco", "Price"), factors = "all")
# 2. Extract 8 questions from the full-factorial design.
# There can be any number you need.
alt_des <- optFederov(~., ffd, 8)$design
# 3. Use the same function as before but with an extra parameter of the
# given design prepared on step 2.
des2 <- rotation.design(candidate.array = alt_des,
attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des2
####
# When you have experiment design file you can proceed as per class presentation.
questionnaire(choice.experiment.design = des1)
# or
questionnaire(choice.experiment.design = des2)
####
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1, row.renames = FALSE, randomize = TRUE, seed = 987)
questionnaire(choice.experiment.design = des1)
data("syn.res1")
syn.res1[1:3, ]
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE, categorical.attributes = c("Region", "Eco"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
dataset1 <- make.dataset(respondent.dataset = syn.res1,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
dataset1[1:10, ]
library(survival)
clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
clogout1
gofm(clogout1)
# 使用 mwtp 函数计算边际意愿支付
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Reg_B", "Reg_C", "More", "Most", "More:Most"),
confidence.level = 0.90, seed = 987)
# Factorials / Permutations / Combinations
expand.grid(1:16, 1:16)
# binom coef (n, k) =  n! / (k! * (n-k)!)
factorial(16)/(factorial(14) * factorial(2))
choose(16, 2)
t(combn(1:16, 2))
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
# Nice and easy "lucky" design of 9 questions only
# Balanced fractional factorial design - every level appears the same number of times
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des1
# Assume that you want to have 8 questions only
# Unbalanced fractional factorial design tries to be as close as possible to balanced,
# however allows some levels to be more frequent than others
library(AlgDesign)
# There are three steps:
# 1. Prepare a full-factorial design for your factors and levels.
ffd <- gen.factorial(c(3,3,3), varNames = c("Region", "Eco", "Price"), factors = "all")
# 2. Extract 8 questions from the full-factorial design.
# There can be any number you need.
alt_des <- optFederov(~., ffd, 8)$design
# 3. Use the same function as before but with an extra parameter of the
# given design prepared on step 2.
des2 <- rotation.design(candidate.array = alt_des,
attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des2
####
# When you have experiment design file you can proceed as per class presentation.
questionnaire(choice.experiment.design = des1)
# or
questionnaire(choice.experiment.design = des2)
####
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1, row.renames = FALSE, randomize = TRUE, seed = 987)
questionnaire(choice.experiment.design = des1)
data("syn.res1")
syn.res1[1:3, ]
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE, categorical.attributes = c("Region", "Eco"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
dataset1 <- make.dataset(respondent.dataset = syn.res1,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
dataset1[1:10, ]
library(survival)
clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
clogout1
gofm(clogout1)
# 使用 mwtp 函数计算边际意愿支付
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Reg_B", "Reg_C", "More", "Most", "More:Most"),
confidence.level = 0.90, seed = 987)
