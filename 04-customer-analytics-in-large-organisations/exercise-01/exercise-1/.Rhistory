if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
des1
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE,
categorical.attributes = ("Cuisine", "Delivery", "Distance"),
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
desmat1
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
str(survey_data_dataframe)
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")
colnames(survey_data_dataframe)
# 在survey_data_dataframe中添加ID列
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
# 确保ID列是数据框的第一列
survey_data_dataframe <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")]
# 再次检查列名以确认ID列已正确添加
colnames(survey_data_dataframe)
library(support.CEs)
library(readxl)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des1)
# import survey data
survey_data <- read_excel("Numeric export Clone of wangjun's project.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
# clean NA data
survey_data_dataframe <- na.omit(survey_data_dataframe)
# check whether NA valus is existing or not
anyNA_exists <- any(is.na(survey_data_dataframe))
if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
colnames(survey_data_dataframe)
# 创建一个新的数据框，仅包含ID列和q1到q9列
survey_data_subset <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9")]
# 检查新数据框的列名，确认它包含了正确的列
colnames(survey_data_subset)
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_subset,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
colnames(survey_data_subset)
survey_data_subset
desmat1
colnames(desmat1)
colnames(survey_data_dataframe)
colnames(desmat1)
colnames(survey_data_subset)
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_subset,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
library(support.CEs)
library(readxl)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des1)
# import survey data
survey_data <- read_excel("Numeric export Clone of wangjun's project.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
# clean NA data
survey_data_dataframe <- na.omit(survey_data_dataframe)
# check whether NA valus is existing or not
anyNA_exists <- any(is.na(survey_data_dataframe))
if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
library(support.CEs)
library(readxl)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des1)
library(survival)
library(support.CEs)
library(readxl)
library(survival)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des1)
# import survey data
survey_data <- read_excel("Numeric export Clone of wangjun's project.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
# clean NA data
survey_data_dataframe <- na.omit(survey_data_dataframe)
# check whether NA valus is existing or not
anyNA_exists <- any(is.na(survey_data_dataframe))
if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
colnames(survey_data_dataframe)
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")]
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
colnames(survey_data_dataframe)
survey_data[1:3, ]
colnames(survey_data_dataframe)
survey_data_dataframe[1:3, ]
colnames(desmat1)
colnames(desmat1)
colnames(survey_data_dataframe)
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
# 指定的选择指标列名
choice.indicators <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9")
# 对每个指定的列名进行匹配测试
for (col_name in choice.indicators) {
col_index <- which(colnames(survey_data_dataframe) == col_name)
# 检查是否找到匹配的列索引
if (length(col_index) == 0) {
print(paste("Column not found:", col_name))
} else {
print(paste("Column", col_name, "found at index", col_index))
}
}
colnames(survey_data_dataframe)
survey_data_dataframe$BLOCK <- 1
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "BLOCK", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
library(support.CEs)
library(readxl)
library(survival)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des1)
# import survey data
survey_data <- read_excel("Numeric export Clone of wangjun's project.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
# clean NA data
survey_data_dataframe <- na.omit(survey_data_dataframe)
# check whether NA valus is existing or not
anyNA_exists <- any(is.na(survey_data_dataframe))
if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
survey_data_dataframe$BLOCK <- 1
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "BLOCK", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "type", "age")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
# 创建一个新的数据框，仅包含ID列和q1到q9列
survey_data_subset <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9")]
# 检查新数据框的列名，确认它包含了正确的列
colnames(survey_data_subset)
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
dataset1
colnames(dataset1)
dataset1[1:3, ]
dataset1
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price + strata(STR),
data = dataset1)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price + strata(STR),
data = dataset1,
control = coxph.control(iter.max = 10000, tol = 1e-09))
dataset1
View(dataset1)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
delivery:gender + delivery:type + dining.in:gender + dining.in:type +  Price + strata(STR),
data = dataset1)
colnames(dataset1)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price + Asian.Cuisine:gender + strata(STR),
data = dataset1)
dataset2 <- dataset1[, !colnames(dataset1) %in% c("type")]
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
delivery:gender + delivery:type + dining.in:gender + dining.in:type +  Price + strata(STR),
data = dataset2)
dataset2 <- dataset1[, !colnames(dataset1) %in% c("age")]
library(survival)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
delivery:gender + delivery:type + dining.in:gender + dining.in:type +  Price + strata(STR),
data = dataset2)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
delivery:gender + delivery:type + dining.in:gender + dining.in:type +  Price + strata(STR),
data = dataset1)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
delivery:gender + delivery:type + dining.in:gender + dining.in:type +  Price + strata(STR),
data = dataset1,
iter.max=30)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price + strata(STR),
data = dataset1,
iter.max=30)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
# delivery:gender + delivery:type + dining.in:gender + dining.in:type +
Price + strata(STR),
data = dataset1,
iter.max=30)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
# delivery:gender + delivery:type + dining.in:gender + dining.in:type +
Price + strata(STR),
data = dataset1,
iter.max=100)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
# delivery:gender + delivery:type + dining.in:gender + dining.in:type +
Price + strata(STR),
data = dataset1,
iter.max=1000)
model <- glm(RES ~ ., data = dataset1, family = binomial())
# 检查模型的总结输出，注意是否有警告信息关于系数不稳定或无穷大
summary(model)
install.packages("safeBinaryRegression")
library(safeBinaryRegression)
library("safeBinaryRegression)
SDF
)
;
,
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
# delivery:gender + delivery:type + dining.in:gender + dining.in:type +
Price + strata(STR),
data = dataset1,
iter.max= 100)
library("safeBinaryRegression")
library("safeBinaryRegression")
library(safeBinaryRegression)
install.packages("safeBinaryRegression")
table(dataset1$RES, dataset1$Asian.Cuisine)
table(dataset1$RES, dataset1$European.Cuisine)
table(dataset1$RES, dataset1$delivery)
table(dataset1$RES, dataset1$dining.in)
model <- glm(RES ~ ., data = dataset1, family = binomial())
summary(model)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
# delivery:gender + delivery:type + dining.in:gender + dining.in:type +
Price + strata(STR),
data = dataset1,
iter.max= 100)
clogout1 <- clogit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in +
# delivery:gender + delivery:type + dining.in:gender + dining.in:type +
Price + strata(STR),
data = dataset1)
# 定义一个函数来实现条件 logistic 回归
conditional_logit <- function(formula, data) {
# 定义一个自定义的似然函数
likelihood <- function(theta, formula, data) {
# 计算每个观测的对数似然
log_likelihood <- sum(log(apply(exp(data %*% theta), 2, sum)))
return(-log_likelihood)
}
# 使用优化算法（例如BFGS）最小化负对数似然
result <- optim(rep(0, ncol(data) - 1), likelihood, formula=formula, data=data, hessian=TRUE)
# 返回模型参数估计值和协方差矩阵
return(list(coefficients=result$par, covariance=result$hessian))
}
# 使用自定义函数进行条件 logistic 回归
clogout2 <- conditional_logit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price, data=dataset1)
# 定义一个函数来实现条件 logistic 回归
conditional_logit <- function(formula, data) {
# 转换数据框为矩阵
X <- model.matrix(formula, data)
y <- as.numeric(data$RES) - 1 # 将响应变量转换为二进制变量
# 定义一个自定义的似然函数
likelihood <- function(theta, X, y) {
# 计算每个观测的对数似然
log_likelihood <- sum(log(apply(exp(X %*% theta), 2, sum)))
return(-log_likelihood)
}
# 使用优化算法（例如BFGS）最小化负对数似然
result <- optim(rep(0, ncol(X) - 1), likelihood, X=X, y=y, hessian=TRUE)
# 返回模型参数估计值和协方差矩阵
return(list(coefficients=result$par, covariance=result$hessian))
}
# 使用自定义函数进行条件 logistic 回归
clogout2 <- conditional_logit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price, data=dataset1)
# 定义一个函数来实现条件 logistic 回归
conditional_logit <- function(formula, data) {
# 转换数据框为矩阵
X <- model.matrix(formula, data)
y <- as.numeric(data$RES) - 1 # 将响应变量转换为二进制变量
# 定义一个自定义的似然函数
likelihood <- function(theta, X, y) {
# 计算每个观测的对数似然
log_likelihood <- sum(log(apply(exp(X %*% theta), 2, sum)))
return(-log_likelihood)
}
# 使用优化算法（例如BFGS）最小化负对数似然
result <- optim(rep(0, ncol(X) - 1), likelihood, X=X, y=y, hessian=TRUE)
# 返回模型参数估计值和协方差矩阵
return(list(coefficients=result$par, covariance=result$hessian))
}
# 使用自定义函数进行条件 logistic 回归
clogout2 <- conditional_logit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price, data=dataset1)
# 定义一个函数来实现条件 logistic 回归
conditional_logit <- function(formula, data) {
# 转换数据框为矩阵
X <- model.matrix(formula, data)
y <- as.numeric(data$RES) - 1 # 将响应变量转换为二进制变量
# 定义一个自定义的似然函数
likelihood <- function(theta, X, y) {
# 计算每个观测的对数似然
log_likelihood <- sum(log(apply(exp(X %*% theta), 2, sum)))
return(-log_likelihood)
}
# 使用优化算法（例如BFGS）最小化负对数似然
result <- optim(rep(0, ncol(X) - 1), likelihood, X=X, y=y, hessian=TRUE)
# 返回模型参数估计值和协方差矩阵
return(list(coefficients=result$par, covariance=result$hessian))
}
# 使用自定义函数进行条件 logistic 回归
clogout2 <- conditional_logit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price, data=dataset1)
# 定义一个函数来实现条件 logistic 回归
conditional_logit <- function(formula, data) {
# 转换数据框为矩阵
X <- model.matrix(formula, data)
y <- as.numeric(data$RES) - 1 # 将响应变量转换为二进制变量
# 定义一个自定义的似然函数
likelihood <- function(theta, X, y) {
# 计算每个观测的对数似然
log_likelihood <- sum(y * (X %*% theta) - log(1 + exp(X %*% theta)))
return(-log_likelihood)
}
# 使用优化算法（例如BFGS）最小化负对数似然
result <- optim(rep(0, ncol(X)), likelihood, X=X, y=y, hessian=TRUE)
# 返回模型参数估计值和协方差矩阵
return(list(coefficients=result$par, covariance=result$hessian))
}
# 使用自定义函数进行条件 logistic 回归
clogout2 <- conditional_logit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price, data=dataset1)
clogout2
clogout2
gofm(clogout1)
# 定义一个函数来实现条件 logistic 回归
conditional_logit <- function(formula, data) {
# 转换数据框为矩阵
X <- model.matrix(formula, data)
y <- as.numeric(data$RES) - 1 # 将响应变量转换为二进制变量
# 定义一个自定义的似然函数
likelihood <- function(theta, X, y) {
# 计算每个观测的对数似然
log_likelihood <- sum(y * (X %*% theta) - log(1 + exp(X %*% theta)))
return(-log_likelihood)
}
# 使用优化算法（例如BFGS）最小化负对数似然
result <- optim(rep(0, ncol(X)), likelihood, X=X, y=y, hessian=TRUE)
# 提取模型参数估计值
coef <- result$par
# 计算模型参数的指数形式
exp_coef <- exp(coef)
# 提取协方差矩阵
covariance <- result$hessian
# 返回模型参数估计值、指数形式和协方差矩阵
return(list(coef=coef, exp_coef=exp_coef, covariance=covariance))
}
# 使用自定义函数进行条件 logistic 回归
clogout2 <- conditional_logit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price, data=dataset1)
# 打印模型参数估计值和指数形式
result <- clogout2
cat(sprintf("%-10s%-10s%-10s\n", "Variable", "coef", "exp(coef)"))
for (i in 1:length(result$coef)) {
cat(sprintf("%-10s%-10f%-10f\n", names(result$coef)[i], result$coef[i], result$exp_coef[i]))
}
conditional_logit <- function(formula, data) {
# 转换数据框为矩阵
X <- model.matrix(formula, data)
y <- as.numeric(data$RES) - 1 # 将响应变量转换为二进制变量
# 定义一个自定义的似然函数
likelihood <- function(theta, X, y) {
# 计算每个观测的对数似然
log_likelihood <- sum(y * (X %*% theta) - log(1 + exp(X %*% theta)))
return(-log_likelihood)
}
# 使用优化算法（例如BFGS）最小化负对数似然
result <- optim(rep(0, ncol(X)), likelihood, X=X, y=y, hessian=TRUE)
# 提取模型参数估计值
coef <- result$par
# 计算模型参数的指数形式
exp_coef <- exp(coef)
# 提取协方差矩阵
covariance <- result$hessian
# 返回模型参数估计值、指数形式和协方差矩阵
return(list(coef=coef, exp_coef=exp_coef, covariance=covariance))
}
# 使用自定义函数进行条件 logistic 回归
clogout2 <- conditional_logit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price, data=dataset1)
# 打印模型参数估计值和指数形式
result <- clogout2
cat(sprintf("%-10s%-10s%-10s\n", "Variable", "coef", "exp(coef)"))
for (i in 1:length(result$coef)) {
cat(sprintf("%-10s%-10f%-10f\n", names(result$coef)[i], result$coef[i], result$exp_coef[i]))
}
# 打印结果表头
cat(sprintf("%-10s%-10s%-10s\n", "Variable", "coef", "exp(coef)"))
# 打印每个变量的系数和指数形式
for (i in seq_along(result$coef)) {
cat(sprintf("%-10s%-10f%-10f\n", names(result$coef)[i], result$coef[i], result$exp_coef[i]))
}
View(result)
result
# 定义一个函数来实现条件 logistic 回归
conditional_logit <- function(formula, data) {
# 转换数据框为矩阵
X <- model.matrix(formula, data)
y <- as.numeric(data$RES) - 1 # 将响应变量转换为二进制变量
# 定义一个自定义的似然函数
likelihood <- function(theta, X, y) {
# 计算每个观测的对数似然
log_likelihood <- sum(y * (X %*% theta) - log(1 + exp(X %*% theta)))
return(-log_likelihood)
}
# 使用优化算法（例如BFGS）最小化负对数似然
result <- optim(rep(0, ncol(X)), likelihood, X=X, y=y, hessian=TRUE)
# 返回模型参数估计值和协方差矩阵
return(list(coefficients=result$par, covariance=result$hessian))
}
# 使用自定义函数进行条件 logistic 回归
clogout2 <- conditional_logit(RES ~ ASC + Asian.Cuisine + European.Cuisine + delivery + dining.in + Price, data=dataset1)
clogout2
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Asian.Cuisine" + "European.Cuisine" + "delivery" + "dining.in" + "Price"),
confidence.level = 0.90, seed = 987)
clogout1
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Asian.Cuisine", "European.Cuisine", "delivery", "dining.in", "Price"),
confidence.level = 0.90, seed = 987)
