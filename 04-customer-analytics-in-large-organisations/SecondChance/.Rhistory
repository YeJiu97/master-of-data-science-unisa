clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
clogout1
gofm(clogout1)
# Calculating the marginal willingness to pay
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Reg_B", "Reg_C", "More", "Most", "More:F", "Most:F"),
confidence.level = 0.90, seed = 987)
# Factorials / Permutations / Combinations
expand.grid(1:16, 1:16)
# binom coef (n, k) =  n! / (k! * (n-k)!)
factorial(16)/(factorial(14) * factorial(2))
choose(16, 2)
t(combn(1:16, 2))
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
# Nice and easy "lucky" design of 9 questions only
# Balanced fractional factorial design - every level appears the same number of times
des1 <- rotation.design(attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("15 mins", '30 mins', '40 mins'),
Price = c("$20", "$30", "$40")),
nalternatives = 2, nblocks = 1)
des1
# Assume that you want to have 8 questions only
# Unbalanced fractional factorial design tries to be as close as possible to balanced,
# however allows some levels to be more frequent than others
library(AlgDesign)
# There are three steps:
# 1. Prepare a full-factorial design for your factors and levels.
ffd <- gen.factorial(c(3,3,3), varNames = c("Food", "Time", "Price"), factors = "all")
# 2. Extract 8 questions from the full-factorial design.
# There can be any number you need.
alt_des <- optFederov(~., ffd, 9)$design
# 3. Use the same function as before but with an extra parameter of the
# given design prepared on step 2.
des2 <- rotation.design(candidate.array = alt_des,
attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("15 mins", '30 mins', '40 mins'),
Price = c("$20", "$30", "$40")),
nalternatives = 2, nblocks = 1)
des2
####
# When you have experiment design file you can proceed as per class presentation.
questionnaire(choice.experiment.design = des1)
# or
questionnaire(choice.experiment.design = des2)
####
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
des1 <- rotation.design(
attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("15 mins", '30 mins', '40 mins'),
Price = c("$20", "$30", "$40")),
nalternatives = 2, nblocks = 1, row.renames = FALSE, randomize = TRUE, seed = 987)
questionnaire(choice.experiment.design = des1)
data("syn.res1")
syn.res1[1:3, ]
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE, categorical.attributes = c("Food", "Time"),
continuous.attributes = c("Price"), unlabeled = TRUE)
# Factorials / Permutations / Combinations
expand.grid(1:16, 1:16)
# binom coef (n, k) =  n! / (k! * (n-k)!)
factorial(16)/(factorial(14) * factorial(2))
choose(16, 2)
t(combn(1:16, 2))
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
# Nice and easy "lucky" design of 9 questions only
# Balanced fractional factorial design - every level appears the same number of times
des1 <- rotation.design(attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("15 mins", '30 mins', '40 mins'),
Price = c("$20", "$30", "$40")),
nalternatives = 2, nblocks = 1)
des1
# Assume that you want to have 8 questions only
# Unbalanced fractional factorial design tries to be as close as possible to balanced,
# however allows some levels to be more frequent than others
library(AlgDesign)
# There are three steps:
# 1. Prepare a full-factorial design for your factors and levels.
ffd <- gen.factorial(c(3,3,3), varNames = c("Food", "Time", "Price"), factors = "all")
# 2. Extract 8 questions from the full-factorial design.
# There can be any number you need.
alt_des <- optFederov(~., ffd, 9)$design
# 3. Use the same function as before but with an extra parameter of the
# given design prepared on step 2.
des2 <- rotation.design(candidate.array = alt_des,
attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("15 mins", '30 mins', '40 mins'),
Price = c("$20", "$30", "$40")),
nalternatives = 2, nblocks = 1)
des2
####
# When you have experiment design file you can proceed as per class presentation.
questionnaire(choice.experiment.design = des1)
# or
questionnaire(choice.experiment.design = des2)
####
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
des1 <- rotation.design(
attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("15 mins", '30 mins', '40 mins'),
Price = c("$20", "$30", "$40")),
nalternatives = 2, nblocks = 1, row.renames = FALSE, randomize = TRUE, seed = 987)
questionnaire(choice.experiment.design = des1)
data("syn.res1")
syn.res1[1:3, ]
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE, categorical.attributes = c("Food", "Time", "Price"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
dataset1 <- make.dataset(respondent.dataset = syn.res1,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
dataset1[1:10, ]
library(survival)
clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
clogout1
gofm(clogout1)
# Calculating the marginal willingness to pay
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Reg_B", "Reg_C", "More", "Most", "More:F", "Most:F"),
confidence.level = 0.90, seed = 987)
des1
questionnaire(choice.experiment.design = des1)
expand.grid(1:16, 1:16)
factorial(16)/(factorial(14) * factorial(2))
choose(16, 2)
t(combn(1:16, 2))
rm(list=ls())
gc()
library(support.CEs)
des1 <- rotation.design(attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("15 mins", '30 mins', '40 mins'),
Price = c("$20", "$30", "$40")),
nalternatives = 2, nblocks = 1)
des1
library(AlgDesign)
# 1. Prepare a full-factorial design for your factors and levels.
ffd <- gen.factorial(c(3,3,3), varNames = c("Food", "Time", "Price"), factors = "all")
# 2. Extract 8 questions from the full-factorial design.
# There can be any number you need.
alt_des <- optFederov(~., ffd, 9)$design
# 3. Use the same function as before but with an extra parameter of the
# given design prepared on step 2.
des2 <- rotation.design(candidate.array = alt_des,
attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("15 mins", '30 mins', '40 mins'),
Price = c("$20", "$30", "$40")),
nalternatives = 2, nblocks = 1)
des2
questionnaire(choice.experiment.design = des1)
des1 <- rotation.design(attribute.names = list(Food = c("Chinese food", "Japanese food", "Fast food"),
Time = c("ready in 15 mins", 'ready in 30 mins', 'ready in 40 mins'),
Price = c("$20", "$40", "$60")),
nalternatives = 2, nblocks = 1)
des1
questionnaire(choice.experiment.design = des1)
# Factorials / Permutations / Combinations
expand.grid(1:16, 1:16)
# binom coef (n, k) =  n! / (k! * (n-k)!)
factorial(16)/(factorial(14) * factorial(2))
choose(16, 2)
t(combn(1:16, 2))
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
# Nice and easy "lucky" design of 9 questions only
# Balanced fractional factorial design - every level appears the same number of times
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des1
# Assume that you want to have 8 questions only
# Unbalanced fractional factorial design tries to be as close as possible to balanced,
# however allows some levels to be more frequent than others
library(AlgDesign)
# There are three steps:
# 1. Prepare a full-factorial design for your factors and levels.
ffd <- gen.factorial(c(3,3,3), varNames = c("Region", "Eco", "Price"), factors = "all")
# 2. Extract 8 questions from the full-factorial design.
# There can be any number you need.
alt_des <- optFederov(~., ffd, 8)$design
# 3. Use the same function as before but with an extra parameter of the
# given design prepared on step 2.
des2 <- rotation.design(candidate.array = alt_des,
attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1)
des2
####
# When you have experiment design file you can proceed as per class presentation.
questionnaire(choice.experiment.design = des1)
# or
questionnaire(choice.experiment.design = des2)
####
# Discrete Choice Experiment
rm(list=ls())
gc()
library(support.CEs)
des1 <- rotation.design(attribute.names = list(Region = c("Reg_A", "Reg_B", "Reg_C"),
Eco = c("Conv.", "More", "Most"),
Price = c("1", "1.1", "1.2")),
nalternatives = 2, nblocks = 1, row.renames = FALSE, randomize = TRUE, seed = 987)
questionnaire(choice.experiment.design = des1)
data("syn.res1")
syn.res1[1:3, ]
desmat1 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE, categorical.attributes = c("Region", "Eco"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
dataset1 <- make.dataset(respondent.dataset = syn.res1,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
dataset1[1:10, ]
library(survival)
clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
clogout1
gofm(clogout1)
# Calculating the marginal willingness to pay
mwtp(output = clogout1, monetary.variables = c("Price"),
nonmonetary.variables = c("Reg_B", "Reg_C", "More", "Most", "More:F", "Most:F"),
confidence.level = 0.90, seed = 987)
rm(list=ls())
gc()
# Load necessary libraries
library(support.CEs)
library(support.CEs)
des2 <- rotation.design(attribute.names = list(
Cuisine = c("Chinese", "Indian", "Japanese"),
Delivery = c("Dining.in", "Delivery", "Pick.up"),
Price = c("$20", "$30", "$50"),
Distance = c("Walking Distance", "Short Drive", "Long Drive")), # Corrected the attribute names and levels
nalternatives = 2,
nblocks = 1)
questionnaire(choice.experiment.design = des2)
save(des2, file = "design.RData")
library(support.CEs)
library(readxl)
library(survival)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des1)
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2x")
getwd()
setwd("C:\Users\Wangjun\Downloads\SecondChance")
setwd("C:/Users/Wangjun/Downloads/SecondChance")
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2x")
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
library(support.CEs)
library(readxl)
library(survival)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des1)
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2.xlsx")
library(support.CEs)
library(readxl)
library(survival)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des1)
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2.xlsx")
questionnaire(choice.experiment.design = des2)
View(survey_data)
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
# clean NA data
survey_data_dataframe <- na.omit(survey_data_dataframe)
# check whether NA valus is existing or not
anyNA_exists <- any(is.na(survey_data_dataframe))
if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
View(survey_data_dataframe)
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
survey_data_dataframe$BLOCK <- 1
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "BLOCK", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des2,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des2,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des1,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des2,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
survey_data_dataframe$BLOCK <- 1
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "BLOCK", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des2,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
colnames(des2)
View(des2)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des2,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery"),
continuous.attributes = c("Price"), unlabeled = TRUE)
View(desmat2)
rm(list=ls())
gc()
# Load necessary libraries
library(support.CEs)
library(support.CEs)
des2 <- rotation.design(attribute.names = list(
Cuisine = c("Chinese", "Indian", "Japanese"),
Delivery = c("Dining.in", "Delivery", "Pick.up"),
Price = c("20", "30", "50"),
Distance = c("Walking Distance", "Short Drive", "Long Drive")), # Corrected the attribute names and levels
nalternatives = 2,
nblocks = 1)
questionnaire(choice.experiment.design = des2)
save(des2, file = "design.RData")
library(support.CEs)
library(readxl)
library(survival)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des2)
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
# clean NA data
survey_data_dataframe <- na.omit(survey_data_dataframe)
# check whether NA valus is existing or not
anyNA_exists <- any(is.na(survey_data_dataframe))
if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
survey_data_dataframe$BLOCK <- 1
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "BLOCK", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des2,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat1[1:3, ]
desmat2[1:3, ]
# dataset
dataset1 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat1)
# dataset
dataset2 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat2)
dataset1
dataset2
dataset2 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat2)
dataset2
View(dataset2)
library(support.CEs)
library(readxl)
library(survival)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des2)
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
# clean NA data
survey_data_dataframe <- na.omit(survey_data_dataframe)
# check whether NA valus is existing or not
anyNA_exists <- any(is.na(survey_data_dataframe))
if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
survey_data_dataframe$BLOCK <- 1
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des2,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat2[1:3, ]
# dataset
dataset2 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat2)
library(support.CEs)
library(readxl)
library(survival)
# check the original survey questions generated by R code
load("Design.RData")
questionnaire(choice.experiment.design = des2)
# import survey data
survey_data <- read_excel("Numeric export Exploring Diverse Dining-Out Experiences_2.xlsx")
survey_data_dataframe <- as.data.frame(survey_data)
survey_data_dataframe<- survey_data_dataframe[-1,1:12]
# clean NA data
survey_data_dataframe <- na.omit(survey_data_dataframe)
# check whether NA valus is existing or not
anyNA_exists <- any(is.na(survey_data_dataframe))
if (anyNA_exists) {
print("NA value exists")
} else {
print("No NA Values")
}
colnames(survey_data_dataframe) <- c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")
# add ID column in to survey_data_dataframe
survey_data_dataframe$ID <- seq_along(survey_data_dataframe$q1)
survey_data_dataframe$BLOCK <- 1
# make sure ID column is the first column
survey_data_dataframe <- survey_data_dataframe[, c("ID", "BLOCK", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "gender", "age", "ethnicity")]
# make a check for that
colnames(survey_data_dataframe)
# data matrix
desmat2 <- make.design.matrix(choice.experiment.design = des2,
optout = TRUE,
categorical.attributes = c("Cuisine", "Delivery", "Distance"),
continuous.attributes = c("Price"), unlabeled = TRUE)
desmat2[1:3, ]
# 创建一个新的数据框，仅包含ID列和q1到q9列
# survey_data_subset <- survey_data_dataframe[, c("ID", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9")]
# 检查新数据框的列名，确认它包含了正确的列
# colnames(survey_data_subset)
# dataset
dataset2 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat2)
dataset2
# dataset2 <- dataset1[, !colnames(dataset1) %in% c("age")]
clogout1 <- clogit(RES ~ ASC + Reg_B + Reg_C + More + Most + More:F + Most:F + Price + strata(STR),
data = dataset1)
dataset2[1:4, ]
# dataset
dataset2 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat2)
dataset2[1:4, ]
# dataset
dataset2 <- make.dataset(respondent.dataset = survey_data_dataframe,
choice.indicators = c("q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9"),
design.matrix = desmat2)
dataset2[1:4, ]
clogout2 <- clogit(RES ~ ASC + gender + age + ethnicity + BLOCK + QES + ALT + Price + strata(STR),
data = dataset2)
colnames(dataset2)
# dataset2 <- dataset1[, !colnames(dataset1) %in% c("age")]
clogout1 <- clogit(RES ~ ASC + Indian + Japanese + Delivery + Pick.up + Short.Drive + Long.Drive + Price + strata(STR),
data = dataset2)
