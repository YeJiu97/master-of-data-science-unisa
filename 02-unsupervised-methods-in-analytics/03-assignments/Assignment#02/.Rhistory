getwd()
original_df <- read.csv("a2-housing.csv")
View(original_df)
str(original_df)
# 对数值型变量进行标准化
scaled_df <- as.data.frame(scale(original_df[, sapply(original_df, is.numeric)]))
# 将标准化后的数据存储在新的数据框中
scaled_df <- cbind(original_df[, !sapply(original_df, is.numeric)], scaled_df)
View(scaled_df)
hist(original_df$VAR, breaks = 30)  # 将VAR替换为你想要查看分布的变量名
original_df <- read.csv("a2-housing.csv")
str(original_df)
# 对数值型变量进行标准化
scaled_df <- as.data.frame(scale(original_df[, sapply(original_df, is.numeric)]))
# 将标准化后的数据存储在新的数据框中
scaled_df <- cbind(original_df[, !sapply(original_df, is.numeric)], scaled_df)
write.csv("scaled-housing.csv")
write.csv("scaled-housing.csv")
getwd()
write.csv(scaled_df, "scaled-housing.csv")
write.csv(scaled_df, "scaled-housing.csv", row.names = FALSE)
str(original_df)
original_df <- read.csv("a2-housing.csv")
str(original_df)
# 创建新的数据框
new_data <- data.frame(
Age = c(89.91372549019603, 59.4011299435028, 92.62142857142858, 90.1257142857143),
B = c(371.80303921568645, 387.66542372881304, 212.38642857142855, 55.669714285714285),
CRIM = c(10.910511274509803, 0.33039867231638403, 1.894067857142857, 16.34608571428571),
DIS = c(2.077163725490196, 4.5281302259887, 2.2739928571428574, 1.9883342857142858),
INDUS = c(18.572549019607816, 8.100621468926542, 17.323571428571423, 18.10000000000001),
LSTAT = c(17.874019607843135, 10.19926553672316, 16.427857142857142, 21.007428571428573),
MEDV = c(17.42941176470588, 25.107042253521158, 17.52857142857143, 12.9),
NOX = c(0.671225490196078, 0.5042723943661983, 0.704714285714286, 0.6668285714285714),
PTRATIO = c(20.195098039215715, 17.859718309859144, 16.50714285714285, 20.200000000000006),
RAD = c(23.019607843137255, 4.443502824858757, 4.785714285714286, 24.0),
RM = c(5.98226470588235, 6.401214084507043, 5.957142857142856, 6.076),
TAX = c(668.2058823529412, 309.16338028169014, 390.35714285714283, 666.0),
ZN = c(0.0, 16.12676056338028, 0.0, 0.0)
)
# 添加新的数据到原始数据框
updated_df <- rbind(original_df, new_data)
# 创建新的数据框
new_data <- data.frame(
AGE = c(89.91372549019603, 59.4011299435028, 92.62142857142858, 90.1257142857143),
B = c(371.80303921568645, 387.66542372881304, 212.38642857142855, 55.669714285714285),
CRIM = c(10.910511274509803, 0.33039867231638403, 1.894067857142857, 16.34608571428571),
DIS = c(2.077163725490196, 4.5281302259887, 2.2739928571428574, 1.9883342857142858),
INDUS = c(18.572549019607816, 8.100621468926542, 17.323571428571423, 18.10000000000001),
LSTAT = c(17.874019607843135, 10.19926553672316, 16.427857142857142, 21.007428571428573),
MEDV = c(17.42941176470588, 25.107042253521158, 17.52857142857143, 12.9),
NOX = c(0.671225490196078, 0.5042723943661983, 0.704714285714286, 0.6668285714285714),
PTRATIO = c(20.195098039215715, 17.859718309859144, 16.50714285714285, 20.200000000000006),
RAD = c(23.019607843137255, 4.443502824858757, 4.785714285714286, 24.0),
RM = c(5.98226470588235, 6.401214084507043, 5.957142857142856, 6.076),
TAX = c(668.2058823529412, 309.16338028169014, 390.35714285714283, 666.0),
ZN = c(0.0, 16.12676056338028, 0.0, 0.0)
)
# 将新的数据添加到原始数据集
updated_df <- rbind(original_df, new_data)
# 打印更新后的数据集结构
str(updated_df)
View(updated_df)
# 对数据集进行标准化
scaled_df <- as.data.frame(scale(updated_df))
# 打印标准化后的数据集结构
str(scaled_df)
View(scaled_df)
original_df <- read.csv("a2-housing.csv")
str(original_df)
# 创建新的数据框
new_data <- data.frame(
AGE = c(89.91372549019603, 59.4011299435028, 92.62142857142858, 90.1257142857143),
B = c(371.80303921568645, 387.66542372881304, 212.38642857142855, 55.669714285714285),
CRIM = c(10.910511274509803, 0.33039867231638403, 1.894067857142857, 16.34608571428571),
DIS = c(2.077163725490196, 4.5281302259887, 2.2739928571428574, 1.9883342857142858),
INDUS = c(18.572549019607816, 8.100621468926542, 17.323571428571423, 18.10000000000001),
LSTAT = c(17.874019607843135, 10.19926553672316, 16.427857142857142, 21.007428571428573),
MEDV = c(17.42941176470588, 25.107042253521158, 17.52857142857143, 12.9),
NOX = c(0.671225490196078, 0.5042723943661983, 0.704714285714286, 0.6668285714285714),
PTRATIO = c(20.195098039215715, 17.859718309859144, 16.50714285714285, 20.200000000000006),
RAD = c(23.019607843137255, 4.443502824858757, 4.785714285714286, 24.0),
RM = c(5.98226470588235, 6.401214084507043, 5.957142857142856, 6.076),
TAX = c(668.2058823529412, 309.16338028169014, 390.35714285714283, 666.0),
ZN = c(0.0, 16.12676056338028, 0.0, 0.0)
)
# 将新的数据添加到原始数据集
updated_df <- rbind(original_df, new_data)
# 打印更新后的数据集结构
str(updated_df)
# 对数据集进行标准化
scaled_df <- as.data.frame(scale(updated_df))
# 打印标准化后的数据集结构
str(scaled_df)
# 计算距离
distances <- dist(scaled_df[-(nrow(scaled_df)-3):nrow(scaled_df), ])
# 计算距离
distances <- dist(scaled_df[-(nrow(scaled_df)-3):nrow(scaled_df), ])
# 排除最后四行的数据
data_to_compare <- scaled_df[1:(nrow(scaled_df) - 4), ]
data_to_check <- scaled_df[(nrow(scaled_df) - 3):nrow(scaled_df), ]
# 计算距离
distances <- dist(rbind(data_to_compare, data_to_check))
# 提取最后四行数据的距离
last_four_distances <- as.matrix(distances)[(nrow(data_to_compare) + 1):nrow(distances), (nrow(data_to_compare) + 1):nrow(distances)]
# 排除最后四行的数据
data_to_compare <- scaled_df[1:(nrow(scaled_df) - 4), ]
data_to_check <- scaled_df[(nrow(scaled_df) - 3):nrow(scaled_df), ]
# 计算距离
distances <- dist(rbind(data_to_compare, data_to_check))
# 提取最后四行数据的距离
last_four_distances <- as.matrix(distances)[(nrow(data_to_compare) + 1):nrow(distances), 1:nrow(data_to_check)]
nrow(distances)
distances
original_df <- read.csv("a2-housing.csv")
str(original_df)
# 创建新的数据框
new_data <- data.frame(
AGE = c(89.91372549019603, 59.4011299435028, 92.62142857142858, 90.1257142857143),
B = c(371.80303921568645, 387.66542372881304, 212.38642857142855, 55.669714285714285),
CRIM = c(10.910511274509803, 0.33039867231638403, 1.894067857142857, 16.34608571428571),
DIS = c(2.077163725490196, 4.5281302259887, 2.2739928571428574, 1.9883342857142858),
INDUS = c(18.572549019607816, 8.100621468926542, 17.323571428571423, 18.10000000000001),
LSTAT = c(17.874019607843135, 10.19926553672316, 16.427857142857142, 21.007428571428573),
MEDV = c(17.42941176470588, 25.107042253521158, 17.52857142857143, 12.9),
NOX = c(0.671225490196078, 0.5042723943661983, 0.704714285714286, 0.6668285714285714),
PTRATIO = c(20.195098039215715, 17.859718309859144, 16.50714285714285, 20.200000000000006),
RAD = c(23.019607843137255, 4.443502824858757, 4.785714285714286, 24.0),
RM = c(5.98226470588235, 6.401214084507043, 5.957142857142856, 6.076),
TAX = c(668.2058823529412, 309.16338028169014, 390.35714285714283, 666.0),
ZN = c(0.0, 16.12676056338028, 0.0, 0.0)
)
# 将新的数据添加到原始数据集
updated_df <- rbind(original_df, new_data)
# 打印更新后的数据集结构
str(updated_df)
# 对数据集进行标准化
scaled_df <- as.data.frame(scale(updated_df))
# 打印标准化后的数据集结构
str(scaled_df)
# 提取最后四行的点（cluster的centroids）
centroids <- scaled_df[(nrow(scaled_df)-3):nrow(scaled_df), ]
# 去除最后四行的点
points <- scaled_df[1:(nrow(scaled_df)-4), ]
# 计算每个点与最后四行的点的距离
distances <- sqrt(rowSums((points - t(centroids))^2))
distances
# 提取最后的四行作为聚类中心
centroids <- updated_df[(nrow(updated_df) - 3):nrow(updated_df), ]
# 提取除最后的四行之外的所有行作为数据点
data_points <- updated_df[1:(nrow(updated_df) - 4), ]
# 计算每个数据点与四个聚类中心之间的欧氏距离
distances <- sqrt(rowSums((data_points - t(centroids))^2))
# 找出每个数据点最近的聚类中心
nearest_centroid <- max.col(-distances)
# 将最近的聚类中心的索引添加到数据集中作为新的列
updated_df$nearest_centroid <- nearest_centroid
# 提取最后的四行作为聚类中心
centroids <- updated_df[(nrow(updated_df) - 3):nrow(updated_df), ]
original_df <- read.csv("a2-housing.csv")
str(original_df)
# 创建新的数据框
new_data <- data.frame(
AGE = c(89.91372549019603, 59.4011299435028, 92.62142857142858, 90.1257142857143),
B = c(371.80303921568645, 387.66542372881304, 212.38642857142855, 55.669714285714285),
CRIM = c(10.910511274509803, 0.33039867231638403, 1.894067857142857, 16.34608571428571),
DIS = c(2.077163725490196, 4.5281302259887, 2.2739928571428574, 1.9883342857142858),
INDUS = c(18.572549019607816, 8.100621468926542, 17.323571428571423, 18.10000000000001),
LSTAT = c(17.874019607843135, 10.19926553672316, 16.427857142857142, 21.007428571428573),
MEDV = c(17.42941176470588, 25.107042253521158, 17.52857142857143, 12.9),
NOX = c(0.671225490196078, 0.5042723943661983, 0.704714285714286, 0.6668285714285714),
PTRATIO = c(20.195098039215715, 17.859718309859144, 16.50714285714285, 20.200000000000006),
RAD = c(23.019607843137255, 4.443502824858757, 4.785714285714286, 24.0),
RM = c(5.98226470588235, 6.401214084507043, 5.957142857142856, 6.076),
TAX = c(668.2058823529412, 309.16338028169014, 390.35714285714283, 666.0),
ZN = c(0.0, 16.12676056338028, 0.0, 0.0)
)
# 将新的数据添加到原始数据集
updated_df <- rbind(original_df, new_data)
# 打印更新后的数据集结构
str(updated_df)
# 对数据集进行标准化
scaled_df <- as.data.frame(scale(updated_df))
# 打印标准化后的数据集结构
str(scaled_df)
# 提取最后的四行作为聚类中心
centroids <- updated_df[(nrow(updated_df) - 3):nrow(updated_df), ]
# 提取除最后的四行之外的所有行作为数据点
data_points <- updated_df[1:(nrow(updated_df) - 4), ]
# 提取最后的四行作为聚类中心
centroids <- updated_df[(nrow(updated_df) - 3):nrow(updated_df), ]
# 提取除最后的四行之外的所有行作为数据点
data_points <- updated_df[1:(nrow(updated_df) - 4), ]
# Calculate the distance using cdist
distances = cdist(data_points.values, centroids.values)
from scipy.spatial.distance import cdist
# 提取最后的四行作为聚类中心
centroids <- updated_df[(nrow(updated_df) - 3):nrow(updated_df), ]
# 提取除最后的四行之外的所有行作为数据点
data_points <- updated_df[1:(nrow(updated_df) - 4), ]
# Calculate distances
distances <- as.data.frame(dist(rbind(data_points, centroids)))
# 提取最后的四行作为聚类中心
centroids <- updated_df[(nrow(updated_df) - 3):nrow(updated_df), ]
# 提取除最后的四行之外的所有行作为数据点
data_points <- updated_df[1:(nrow(updated_df) - 4), ]
# Calculate distance between each row of df_a and df_b
distances <- matrix(NA, nrow(data_points), nrow(centroids))
for (i in 1:nrow(data_points)) {
for (j in 1:nrow(centroids)) {
distances[i, j] <- sqrt(sum((data_points[i, ] - centroids[j, ])^2))
}
}
# Create a new dataframe with distances
dist_df <- as.data.frame(distances)
colnames(dist_df) <- paste0("Distance_to_row_", 1:nrow(centroids))
rownames(dist_df) <- paste0("Row_", 1:nrow(data_points))
# Print the resulting dataframe
print(dist_df)
View(data_points)
View(updated_df)
View(new_data)
View(original_df)
min_values <- apply(dist_df, 1, min)
min_values
standard_deviation <- sd(min_values)
standard_deviation
standard_deviation <- sd(min_values, na.rm = TRUE)
standard_deviation
original_df <- read.csv("a2-housing.csv")
str(original_df)
# 创建新的数据框
new_data <- data.frame(
AGE = c(89.91372549019603, 59.4011299435028, 92.62142857142858, 90.1257142857143),
B = c(371.80303921568645, 387.66542372881304, 212.38642857142855, 55.669714285714285),
CRIM = c(10.910511274509803, 0.33039867231638403, 1.894067857142857, 16.34608571428571),
DIS = c(2.077163725490196, 4.5281302259887, 2.2739928571428574, 1.9883342857142858),
INDUS = c(18.572549019607816, 8.100621468926542, 17.323571428571423, 18.10000000000001),
LSTAT = c(17.874019607843135, 10.19926553672316, 16.427857142857142, 21.007428571428573),
MEDV = c(17.42941176470588, 25.107042253521158, 17.52857142857143, 12.9),
NOX = c(0.671225490196078, 0.5042723943661983, 0.704714285714286, 0.6668285714285714),
PTRATIO = c(20.195098039215715, 17.859718309859144, 16.50714285714285, 20.200000000000006),
RAD = c(23.019607843137255, 4.443502824858757, 4.785714285714286, 24.0),
RM = c(5.98226470588235, 6.401214084507043, 5.957142857142856, 6.076),
TAX = c(668.2058823529412, 309.16338028169014, 390.35714285714283, 666.0),
ZN = c(0.0, 16.12676056338028, 0.0, 0.0)
)
# 将新的数据添加到原始数据集
updated_df <- rbind(original_df, new_data)
# 打印更新后的数据集结构
str(updated_df)
# 对数据集进行标准化
scaled_df <- as.data.frame(scale(updated_df))
# 打印标准化后的数据集结构
str(scaled_df)
View(scaled_df)
View(updated_df)
original_df <- read.csv("a2-housing.csv")
str(original_df)
# 创建新的数据框
new_data <- data.frame(
AGE = c(89.91372549019603, 59.4011299435028, 92.62142857142858, 90.1257142857143),
B = c(371.80303921568645, 387.66542372881304, 212.38642857142855, 55.669714285714285),
CRIM = c(10.910511274509803, 0.33039867231638403, 1.894067857142857, 16.34608571428571),
DIS = c(2.077163725490196, 4.5281302259887, 2.2739928571428574, 1.9883342857142858),
INDUS = c(18.572549019607816, 8.100621468926542, 17.323571428571423, 18.10000000000001),
LSTAT = c(17.874019607843135, 10.19926553672316, 16.427857142857142, 21.007428571428573),
MEDV = c(17.42941176470588, 25.107042253521158, 17.52857142857143, 12.9),
NOX = c(0.671225490196078, 0.5042723943661983, 0.704714285714286, 0.6668285714285714),
PTRATIO = c(20.195098039215715, 17.859718309859144, 16.50714285714285, 20.200000000000006),
RAD = c(23.019607843137255, 4.443502824858757, 4.785714285714286, 24.0),
RM = c(5.98226470588235, 6.401214084507043, 5.957142857142856, 6.076),
TAX = c(668.2058823529412, 309.16338028169014, 390.35714285714283, 666.0),
ZN = c(0.0, 16.12676056338028, 0.0, 0.0)
)
# 将新的数据添加到原始数据集
updated_df <- rbind(original_df, new_data)
# 打印更新后的数据集结构
str(updated_df)
# 对数据集进行标准化
scaled_df <- as.data.frame(scale(updated_df))
# 打印标准化后的数据集结构
str(scaled_df)
# 提取最后的四行作为聚类中心
centroids <- scaled_df[(nrow(scaled_df) - 3):nrow(scaled_df), ]
# 提取除最后的四行之外的所有行作为数据点
data_points <- scaled_df[1:(nrow(scaled_df) - 4), ]
# Calculate distance between each row of df_a and df_b
distances <- matrix(NA, nrow(data_points), nrow(centroids))
for (i in 1:nrow(data_points)) {
for (j in 1:nrow(centroids)) {
distances[i, j] <- sqrt(sum((data_points[i, ] - centroids[j, ])^2))
}
}
# Create a new dataframe with distances
dist_df <- as.data.frame(distances)
colnames(dist_df) <- paste0("Distance_to_row_", 1:nrow(centroids))
rownames(dist_df) <- paste0("Row_", 1:nrow(data_points))
# Print the resulting dataframe
print(dist_df)
min_values <- apply(dist_df, 1, min)
min_values
standard_deviation <- sd(min_values, na.rm = TRUE)
standard_deviation
anomaly_score <- min_values / standard_deviation
anomaly_score
anomaly_df <- anomaly_score[[anomaly_score > 3]]
anomaly_df <- anomaly_score[anomaly_score > 3]
anomaly_df
names(anomaly_df)
mean(original_df[, "LSTAT"])
mean(original_df[, "LSTAT"], na.rm = TRUE)
29.93 / 12.67117
original_df <- read.csv("a2-housing.csv")
str(original_df)
library(ggplot2)
library(dplyr)
# 创建一个数据框存储特征和其对应的缺失值数量
missing_data <- data.frame(
Feature = colnames(original_df),
Missing_Values = colSums(is.na(original_df))
)
# 使用ggplot绘制缺失值柱状图
ggplot(data = missing_data, aes(x = Feature, y = Missing_Values)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.6) +
coord_flip() +
labs(x = "Features", y = "Missing Values Count", title = "Missing Values by Feature")
library(ggplot2)
# 计算每个特征的缺失值比例
missing_values <- colMeans(is.na(original_df))
# 创建包含特征名称和缺失值比例的数据框
missing_df <- data.frame(Feature = names(missing_values), Missing_Ratio = missing_values)
# 创建直方图
ggplot(missing_df, aes(x = Feature, y = Missing_Ratio)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +
labs(x = "Features", y = "Missing Value Ratio") +
ggtitle("Missing Value Ratio for Each Feature") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing_df
original_df <- read.csv("a2-housing.csv")
str(original_df)
# 创建新的数据框
new_data <- data.frame(
AGE = c(89.91372549019603, 59.4011299435028, 92.62142857142858, 90.1257142857143),
B = c(371.80303921568645, 387.66542372881304, 212.38642857142855, 55.669714285714285),
CRIM = c(10.910511274509803, 0.33039867231638403, 1.894067857142857, 16.34608571428571),
DIS = c(2.077163725490196, 4.5281302259887, 2.2739928571428574, 1.9883342857142858),
INDUS = c(18.572549019607816, 8.100621468926542, 17.323571428571423, 18.10000000000001),
LSTAT = c(17.874019607843135, 10.19926553672316, 16.427857142857142, 21.007428571428573),
MEDV = c(17.42941176470588, 25.107042253521158, 17.52857142857143, 12.9),
NOX = c(0.671225490196078, 0.5042723943661983, 0.704714285714286, 0.6668285714285714),
PTRATIO = c(20.195098039215715, 17.859718309859144, 16.50714285714285, 20.200000000000006),
RAD = c(23.019607843137255, 4.443502824858757, 4.785714285714286, 24.0),
RM = c(5.98226470588235, 6.401214084507043, 5.957142857142856, 6.076),
TAX = c(668.2058823529412, 309.16338028169014, 390.35714285714283, 666.0),
ZN = c(0.0, 16.12676056338028, 0.0, 0.0)
)
# 将新的数据添加到原始数据集
updated_df <- rbind(original_df, new_data)
# 打印更新后的数据集结构
str(updated_df)
# 对数据集进行标准化
scaled_df <- as.data.frame(scale(updated_df))
# 打印标准化后的数据集结构
str(scaled_df)
# 提取最后的四行作为聚类中心
centroids <- scaled_df[(nrow(scaled_df) - 3):nrow(scaled_df), ]
# 提取除最后的四行之外的所有行作为数据点
data_points <- scaled_df[1:(nrow(scaled_df) - 4), ]
# Calculate distance between each row of df_a and df_b
distances <- matrix(NA, nrow(data_points), nrow(centroids))
for (i in 1:nrow(data_points)) {
for (j in 1:nrow(centroids)) {
distances[i, j] <- sqrt(sum((data_points[i, ] - centroids[j, ])^2))
}
}
# Create a new dataframe with distances
dist_df <- as.data.frame(distances)
colnames(dist_df) <- paste0("Distance_to_row_", 1:nrow(centroids))
rownames(dist_df) <- paste0("Row_", 1:nrow(data_points))
# Print the resulting dataframe
print(dist_df)
min_values <- apply(dist_df, 1, min)
min_values
standard_deviation <- sd(min_values, na.rm = TRUE)
standard_deviation
anomaly_score <- min_values / standard_deviation
anomaly_score
anomaly_df <- anomaly_score[anomaly_score > 3]
standard_deviation
standard_deviation
anomaly_score <- min_values / standard_deviation
anomaly_score
cleaned_anomaly_df <- na.omit(anomaly_df)
print(cleaned_anomaly_df)
cleaned_anomaly_df <- na.omit(anomaly_df)
print(cleaned_anomaly_df)
summary(cleaned_anomaly_df)
hist(cleaned_anomaly_df, main = "Anomaly Scores Distribution", xlab = "Anomaly Score", ylab = "Frequency")
boxplot(cleaned_anomaly_df, main = "Boxplot of Anomaly Scores")
plot(cleaned_anomaly_df ~ original_df$AGE, main = "Anomaly Scores vs. AGE", xlab = "AGE", ylab = "Anomaly Score")
plot(cleaned_anomaly_df ~ na.omit(original_df)$AGE, main = "Anomaly Scores vs. AGE", xlab = "AGE", ylab = "Anomaly Score")
hist(cleaned_anomaly_df, main = "Anomaly Scores Distribution", xlab = "Anomaly Score", ylab = "Frequency")
special_anomaly_data <- anomaly_score[anomaly_score > 8]
special_anomaly_data
# 计算每列的平均值，去除NA值
column_means <- colMeans(original_df, na.rm = TRUE)
# 打印每列的平均值
print(column_means)
