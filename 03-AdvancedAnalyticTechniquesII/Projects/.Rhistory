knitr::opts_chunk$set(echo = TRUE)
# import dataset
load("rdmTweets-201306.RData")
View(tweets)
View(tweets)
knitr::opts_chunk$set(echo = TRUE)
# import dataset
load("rdmTweets-201306.RData")
getwd()
# import dataset
load("rdmTweets-201306.RData")
load("C:/Users/yejiu/Desktop/Github/master-of-data-science-unisa/03-AdvancedAnalyticTechniquesII/Projects/rdmTweets-201306.RData")
# import dataset
load("rdmTweets-201306.RData")
getwd()
install.packages("twitterR")
# import dataset
load("rdmTweets-201306.RData")
View(tweets)
# import dataset
load("rdmTweets-201306.RData")
# library package
library(twitteR)
# import dataset
load("rdmTweets-201306.RData")
# library package
library(twitteR)
# import dataset
load("rdmTweets-201306.RData")
View(tweets)
knitr::opts_chunk$set(echo = TRUE)
# library package
library(twitteR)
# import dataset
load("rdmTweets-201306.RData")
View(tweets)
head(tweet)
str(tweet)
knitr::opts_chunk$set(echo = TRUE)
# library package
# library(twitteR)
# import dataset
load("rdmTweets-201306.RData")
View(tweets)
View(tweets)
View(tweets)
head(tweets)
lapply(tweets, function(x) cat(x, "\n"))
# Load necessary libraries
library(mvtnorm)
library(ggplot2)
# Set the parameters
set.seed(123)  # For reproducibility
n_points <- 1000  # Number of data points
n_clusters <- 4  # Number of clusters
cluster_centers <- matrix(c(2, 2, -2, 2, -2, -2, 2, -2), ncol = 2)  # Cluster centers
cluster_variances <- c(0.5, 0.5, 0.5, 0.5)  # Cluster variances
noise_sd <- 1  # Standard deviation for noise
# Generate data points
data_points <- NULL
for (i in 1:n_clusters) {
cluster_size <- n_points / n_clusters
cluster_noise_size <- round(cluster_size * 0.05)  # 5% noise
# Generate data points for the cluster
cluster_data <- rmvnorm(cluster_size - cluster_noise_size, mean = cluster_centers[i,], sigma = diag(cluster_variances[i]))
# Add noise points
noise_data <- matrix(rnorm(cluster_noise_size * 2, sd = noise_sd), ncol = 2)
# Combine cluster and noise data
cluster_data <- rbind(cluster_data, noise_data)
data_points <- rbind(data_points, cluster_data)
}
# Load necessary libraries
library(MASS)
library(ggplot2)
# Set the parameters
set.seed(123)  # For reproducibility
n_points <- 1000  # Number of data points
n_clusters <- 4  # Number of clusters
cluster_centers <- matrix(c(2, 2, -2, 2, -2, -2, 2, -2), ncol = 2)  # Cluster centers
cluster_variances <- c(0.5, 0.5, 0.5, 0.5)  # Cluster variances
noise_sd <- 1  # Standard deviation for noise
# Generate data points
data_points <- NULL
for (i in 1:n_clusters) {
cluster_size <- n_points / n_clusters
cluster_noise_size <- round(cluster_size * 0.05)  # 5% noise
# Generate data points for the cluster
cluster_data <- mvrnorm(n = cluster_size - cluster_noise_size, mu = cluster_centers[i,], Sigma = diag(cluster_variances[i]))
# Add noise points
noise_data <- matrix(rnorm(cluster_noise_size * 2, sd = noise_sd), ncol = 2)
# Combine cluster and noise data
cluster_data <- rbind(cluster_data, noise_data)
data_points <- rbind(data_points, cluster_data)
}
# Load necessary libraries
library(mvtnorm)
library(ggplot2)
# Set the parameters
set.seed(123)  # For reproducibility
n_points <- 1000  # Number of data points
n_clusters <- 4  # Number of clusters
cluster_centers <- matrix(c(2, 2, -2, 2, -2, -2, 2, -2), ncol = 2)  # Cluster centers
cluster_variances <- c(0.5, 0.5, 0.5, 0.5)  # Cluster variances
noise_sd <- 1  # Standard deviation for noise
# Generate data points
data_points <- NULL
for (i in 1:n_clusters) {
cluster_size <- n_points / n_clusters
cluster_noise_size <- round(cluster_size * 0.05)  # 5% noise
# Generate data points for the cluster
cluster_data <- rmvnorm(n = cluster_size - cluster_noise_size, mean = cluster_centers[i,], sigma = diag(cluster_variances[i]))
# Add noise points
noise_data <- matrix(rnorm(cluster_noise_size * 2, sd = noise_sd), ncol = 2)
# Combine cluster and noise data
cluster_data <- rbind(cluster_data, noise_data)
data_points <- rbind(data_points, cluster_data)
}
# Load the required library
library(MASS)
# Set the number of data points and noise level
n_points <- 1000
noise_level <- 0.05
# Set the means and covariances for the four clusters
cluster_means <- matrix(c(1, 1, 5, 5, 1, 5, 5, 1), ncol = 2, byrow = TRUE)
cluster_covs <- array(c(1, 0.5, 0.5, 1), dim = c(2, 2, 4))
# Generate data for each cluster
data_points <- NULL
for (i in 1:4) {
cluster_data <- mvrnorm(n_points, mu = cluster_means[i,], Sigma = cluster_covs[,,i])
data_points <- rbind(data_points, cluster_data)
}
# Add noise to the data
noise <- rnorm(n_points * 2, mean = 0, sd = noise_level)
data_points <- data_points + matrix(noise, ncol = 2)
# Load the required library
library(MASS)
# Set the number of data points and noise level
n_points <- 1000
noise_level <- 0.05
# Set the means and covariances for the four clusters
cluster_means <- matrix(c(1, 1, 5, 5, 1, 5, 5, 1), ncol = 2, byrow = TRUE)
cluster_covs <- array(c(1, 0.5, 0.5, 1), dim = c(2, 2, 4))
# Generate data for each cluster
data_points <- NULL
for (i in 1:4) {
cluster_data <- mvrnorm(n_points, mu = cluster_means[i,], Sigma = cluster_covs[,,i])
data_points <- rbind(data_points, cluster_data)
}
# Generate noise with the same dimensions as data_points
noise <- matrix(rnorm(n_points * 2, mean = 0, sd = noise_level), ncol = 2)
# Add noise to the data
data_points <- data_points + noise
View(tweets)
knitr::opts_chunk$set(echo = TRUE)
load("rdmTweets-201306.RData")
knitr::opts_chunk$set(echo = TRUE)
load("rdmTweets-201306.RData")
# Load the required library
library(MASS)
# Set the number of data points and noise level
n_points <- 1000
noise_level <- 0.05
# Set the means and covariances for the four clusters
cluster_means <- matrix(c(1, 1, 5, 5, 1, 5, 5, 1), ncol = 2, byrow = TRUE)
cluster_covs <- array(c(1, 0.5, 0.5, 1), dim = c(2, 2, 4))
# Generate data for each cluster
data_points <- NULL
for (i in 1:4) {
cluster_data <- mvrnorm(n_points, mu = cluster_means[i,], Sigma = cluster_covs[,,i])
data_points <- rbind(data_points, cluster_data)
}
# Generate noise with the same dimensions as data_points
noise <- matrix(rnorm(n_points * 2, mean = 0, sd = noise_level), ncol = 2)
# Add noise to the data
data_points <- data_points + noise
