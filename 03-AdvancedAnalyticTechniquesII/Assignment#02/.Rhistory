prob_table <- data.frame(
BTNL9 = c(0, 1),
Probability = c(p_btnl9_0, p_btnl9_1)
)
# Print the table
print(prob_table)
# Calculate the conditional probability table from BTNL9 to CD300LG
# P(CD300LG | BTNL9)
# Calculate P(CD300LG = 0 | BTNL9 = 0)
p_cd300lg_0_given_btnl9_0 <- sum(combined_data$CD300LG == 0 &
combined_data$BTNL9 == 0) /
sum(combined_data$BTNL9 == 0)
# Calculate P(CD300LG = 1 | BTNL9 = 0)
p_cd300lg_1_given_btnl9_0 <- sum(combined_data$CD300LG == 1 &
combined_data$BTNL9 == 0) /
sum(combined_data$BTNL9 == 0)
# Calculate P(CD300LG = 0 | BTNL9 = 1)
p_cd300lg_0_given_btnl9_1 <- sum(combined_data$CD300LG == 0 &
combined_data$BTNL9 == 1) /
sum(combined_data$BTNL9 == 1)
# Calculate P(CD300LG = 1 | BTNL9 = 1)
p_cd300lg_1_given_btnl9_1 <- sum(combined_data$CD300LG == 1 &
combined_data$BTNL9 == 1) /
sum(combined_data$BTNL9 == 1)
# Create a data frame to store the conditional probabilities for CD300LG given BTNL9
prob_table_cd300lg <- data.frame(
BTNL9 = c(0, 0, 1, 1),
CD300LG = c(0, 1, 0, 1),
Probability = c(p_cd300lg_0_given_btnl9_0,
p_cd300lg_1_given_btnl9_0,
p_cd300lg_0_given_btnl9_1,
p_cd300lg_1_given_btnl9_1)
)
# Print the table
print(prob_table_cd300lg)
# Calculate the conditional probability table of class nodes
# P(class | CD300LG)
# Calculate P(class = 0 | CD300LG = 0)
p_class_0_given_cd300lg_0 <- sum(combined_data$class == "0" &
combined_data$CD300LG == 0) /
sum(combined_data$CD300LG == 0)
# Calculate P(class = 1 | CD300LG = 0)
p_class_1_given_cd300lg_0 <- sum(combined_data$class == "1" &
combined_data$CD300LG == 0) /
sum(combined_data$CD300LG == 0)
# Calculate P(class = 0 | CD300LG = 1)
p_class_0_given_cd300lg_1 <- sum(combined_data$class == "0" &
combined_data$CD300LG == 1) /
sum(combined_data$CD300LG == 1)
# Calculate P(class = 1 | CD300LG = 1)
p_class_1_given_cd300lg_1 <- sum(combined_data$class == "1" &
combined_data$CD300LG == 1) /
sum(combined_data$CD300LG == 1)
# Calculate the conditional probability table of IGSF10 node
# P(IGSF10 | class)
# Calculate P(IGSF10 = 0 | class = 0)
p_igsf10_0_given_class_0 <- sum(combined_data$IGSF10 == 0 &
combined_data$class == "0") /
sum(combined_data$class == "0")
# Calculate P(IGSF10 = 1 | class = 0)
p_igsf10_1_given_class_0 <- sum(combined_data$IGSF10 == 1 &
combined_data$class == "0") /
sum(combined_data$class == "0")
# Calculate P(IGSF10 = 0 | class = 1)
p_igsf10_0_given_class_1 <- sum(combined_data$IGSF10 == 0 &
combined_data$class == "1") /
sum(combined_data$class == "1")
# Calculate P(IGSF10 = 1 | class = 1)
p_igsf10_1_given_class_1 <- sum(combined_data$IGSF10 == 1 &
combined_data$class == "1") /
sum(combined_data$class == "1")
# Create a data frame to store the conditional probabilities for class given CD300LG
prob_table_class <- data.frame(
CD300LG = c(0, 0, 1, 1),
class = c(0, 1, 0, 1),
Probability = c(p_class_0_given_cd300lg_0,
p_class_1_given_cd300lg_0,
p_class_0_given_cd300lg_1,
p_class_1_given_cd300lg_1)
)
# Print the table
print(prob_table_class)
# Calculate the conditional probability table of ABCA9 node
# P(ABCA9 | BTNL9, IGSF10)
# Calculate P(ABCA9 = 0 | BTNL9 = 0, IGSF10 = 0)
p_abca9_0_given_btnl9_0_igsf10_0 <- sum(combined_data$ABCA9 == 0 &
combined_data$BTNL9 == 0 &
combined_data$IGSF10 == 0) /
sum(combined_data$BTNL9 == 0 & combined_data$IGSF10 == 0)
# Calculate P(ABCA9 = 1 | BTNL9 = 0, IGSF10 = 0)
p_abca9_1_given_btnl9_0_igsf10_0 <- sum(combined_data$ABCA9 == 1 &
combined_data$BTNL9 == 0 &
combined_data$IGSF10 == 0) /
sum(combined_data$BTNL9 == 0 & combined_data$IGSF10 == 0)
# Calculate P(ABCA9 = 0 | BTNL9 = 1, IGSF10 = 0)
p_abca9_0_given_btnl9_1_igsf10_0 <- sum(combined_data$ABCA9 == 0 &
combined_data$BTNL9 == 1 &
combined_data$IGSF10 == 0) /
sum(combined_data$BTNL9 == 1 & combined_data$IGSF10 == 0)
# Calculate P(ABCA9 = 1 | BTNL9 = 1, IGSF10 = 0)
p_abca9_1_given_btnl9_1_igsf10_0 <- sum(combined_data$ABCA9 == 1 &
combined_data$BTNL9 == 1 &
combined_data$IGSF10 == 0) /
sum(combined_data$BTNL9 == 1 & combined_data$IGSF10 == 0)
# Calculate P(ABCA9 = 0 | BTNL9 = 0, IGSF10 = 1)
p_abca9_0_given_btnl9_0_igsf10_1 <- sum(combined_data$ABCA9 == 0 &
combined_data$BTNL9 == 0 &
combined_data$IGSF10 == 1) /
sum(combined_data$BTNL9 == 0 & combined_data$IGSF10 == 1)
# Calculate P(ABCA9 = 1 | BTNL9 = 0, IGSF10 = 1)
p_abca9_1_given_btnl9_0_igsf10_1 <- sum(combined_data$ABCA9 == 1 &
combined_data$BTNL9 == 0 &
combined_data$IGSF10 == 1) /
sum(combined_data$BTNL9 == 0 & combined_data$IGSF10 == 1)
# Calculate P(ABCA9 = 0 | BTNL9 = 1, IGSF10 = 1)
p_abca9_0_given_btnl9_1_igsf10_1 <- sum(combined_data$ABCA9 == 0 &
combined_data$BTNL9 == 1 &
combined_data$IGSF10 == 1) /
sum(combined_data$BTNL9 == 1 & combined_data$IGSF10 == 1)
# Calculate P(ABCA9 = 1 | BTNL9 = 1, IGSF10 = 1)
p_abca9_1_given_btnl9_1_igsf10_1 <- sum(combined_data$ABCA9 == 1 &
combined_data$BTNL9 == 1 &
combined_data$IGSF10 == 1) /
sum(combined_data$BTNL9 == 1 & combined_data$IGSF10 == 1)
# Create a data frame to store the conditional probabilities for ABCA9 given BTNL9 and IGSF10
prob_table_abca9 <- data.frame(
BTNL9 = c(0, 0, 1, 1, 0, 0, 1, 1),
IGSF10 = c(0, 0, 0, 0, 1, 1, 1, 1),
ABCA9 = c(0, 1, 0, 1, 0, 1, 0, 1),
Probability = c(p_abca9_0_given_btnl9_0_igsf10_0,
p_abca9_1_given_btnl9_0_igsf10_0,
p_abca9_0_given_btnl9_1_igsf10_0,
p_abca9_1_given_btnl9_1_igsf10_0,
p_abca9_0_given_btnl9_0_igsf10_1,
p_abca9_1_given_btnl9_0_igsf10_1,
p_abca9_0_given_btnl9_1_igsf10_1,
p_abca9_1_given_btnl9_1_igsf10_1)
)
# Print the table
print(prob_table_abca9)
# Given conditional probabilities
p_btnl9_1 <- 0.1790429
p_cd300lg_1_given_btnl9_1 <- 0.640553
# Calculate P(IGSF10 = 1 | class)
p_class_0_given_cd300lg_1 <- 0.7414966
p_class_1_given_cd300lg_1 <- 0.2585034
p_igsf10_1_given_class_0 <- 0.875
p_igsf10_1_given_class_1 <- 0.06454545
p_igsf10_1_given_cd300lg_1 <- p_class_0_given_cd300lg_1 *
p_igsf10_1_given_class_0 + p_class_1_given_cd300lg_1 *
p_igsf10_1_given_class_1
# P(ABCA9 = 1 | BTNL9 = 1, IGSF10 = 1)
p_abca9_1_given_btnl9_1_igsf10_1 <- 0.9661017
# Calculate joint probability
p_all_high <- p_btnl9_1 * p_cd300lg_1_given_btnl9_1 *
p_igsf10_1_given_cd300lg_1 *
p_abca9_1_given_btnl9_1_igsf10_1
cat("P(BTNL9 = 1, CD300LG = 1, IGSF10 = 1, ABCA9 = 1):", p_all_high, "\n")
p_cd300lg_1_given_btnl9_0 <- 0.008040201
p_class_1_given_cd300lg_1 <- 0.2585034
p_class_1_given_cd300lg_1_and_btnl9_0 <-
p_class_1_given_cd300lg_1 * p_cd300lg_1_given_btnl9_0
print(p_class_1_given_cd300lg_1_and_btnl9_0)
# Calculate the conditional probability table of class nodes
# P(class | CD300LG)
# Calculate P(class = 0 | CD300LG = 0)
p_class_0_given_cd300lg_0 <- sum(combined_data$class == "0" &
combined_data$CD300LG == 0) /
sum(combined_data$CD300LG == 0)
# Calculate P(class = 1 | CD300LG = 0)
p_class_1_given_cd300lg_0 <- sum(combined_data$class == "1" &
combined_data$CD300LG == 0) /
sum(combined_data$CD300LG == 0)
# Calculate P(class = 0 | CD300LG = 1)
p_class_0_given_cd300lg_1 <- sum(combined_data$class == "0" &
combined_data$CD300LG == 1) /
sum(combined_data$CD300LG == 1)
# Calculate P(class = 1 | CD300LG = 1)
p_class_1_given_cd300lg_1 <- sum(combined_data$class == "1" &
combined_data$CD300LG == 1) /
sum(combined_data$CD300LG == 1)
# Create a data frame for the calculated probabilities
conditional_probabilities <- data.frame(
CD300LG = c(0, 0, 1, 1),
class = c(0, 1, 0, 1),
Probability = c(p_class_0_given_cd300lg_0,
p_class_1_given_cd300lg_0,
p_class_0_given_cd300lg_1,
p_class_1_given_cd300lg_1)
)
# Print the data frame
print(conditional_probabilities)
# Calculate the conditional probability table of BTNL9 node
# P(BTNL9 | parent nodes)
# Calculate P(BTNL9 = 0)
p_btnl9_0 <- sum(combined_data$BTNL9 == 0) / nrow(combined_data)
# Calculate P(BTNL9 = 1)
p_btnl9_1 <- sum(combined_data$BTNL9 == 1) / nrow(combined_data)
# Create a data frame to store the probabilities
prob_table_btnl <- data.frame(
BTNL9 = c(0, 1),
Probability = c(p_btnl9_0, p_btnl9_1)
)
# Print the table
print(prob_table_btnl)
# import data set
data <- read.csv("BRCA_RNASeqv2_top50.csv")
# View the number of missing values in each column
missing_values_per_column <- sapply(data, function(x) sum(is.na(x)))
# Output the number of missing values in each column
missing_values_per_column
# Custom function to identify missing values
is_missing <- function(x) {
return(is.na(x) |
x == "None" |
is.nan(x) |
x == "" |
x == "N/A" |
x == "-" |
x == "Null")
}
# View the number of missing values in each column
missing_values_per_column <- sapply(data, function(x) sum(is_missing(x)))
# Output the number of missing values in each column
missing_values_per_column
summary(data)
data_no_class <- data[, !names(data) %in% "class"]
library(pcalg)
# Calculate correlation matrix
cor_matrix <- cor(data_no_class)
# Estimating structure using PC algorithm
suffStat <- list(C = cor_matrix, n = nrow(data_no_class))
pc_result <- pc(suffStat, indepTest = gaussCItest, alpha = 0.05,
labels = colnames(data_no_class))
# output the trained model
pc_result
library(qgraph)
qgraph(pc_result@graph,  title = "Gene Regulatory Network")
adjMatrix <- as(pc_result, "amat")
ebf1_index <- which(colnames(data_no_class) == "EBF1")
ebf1_neighbors <- which(adjMatrix[ebf1_index, ] != 0)
causal_effects <- abs(cor(data_no_class)[ebf1_neighbors, "EBF1"])
# Get the gene name of the causal effect
genes_with_effects <- rownames(cor(data_no_class)[ebf1_neighbors, ])
# Merge gene names and their corresponding effects into a data frame
effects_df <- data.frame(Genes = genes_with_effects, Effects = causal_effects)
# Rank causal effects and get the top 10
top_genes <- head(effects_df[order(-effects_df$Effects),], 10)
# print result
top_genes
# Extract the adjacency matrix
adj_matrix <- as(pc_result, "amat")
# Find directly connected genes to EBF1
direct_genes <- which(adj_matrix["EBF1",] == 1)
# Find the names of these genes
direct_gene_names <- colnames(adj_matrix)[direct_genes]
direct_gene_names
second_degree_genes <- vector()
for (gene in direct_gene_names) {
tmp_genes <- which(adj_matrix[gene,] == 1)
tmp_gene_names <- setdiff(colnames(adj_matrix)[tmp_genes], c(direct_gene_names, "EBF1"))
second_degree_genes <- unique(c(second_degree_genes, tmp_gene_names))
}
all_candidate_genes <- c(direct_gene_names, second_degree_genes)
correlations <- sapply(all_candidate_genes, function(gene) {
abs(cor(data_no_class[, gene], data_no_class[, "EBF1"]))
})
ranked_genes <- names(sort(correlations, decreasing = TRUE))
# Take the top 10 genes
top_10_genes <- ranked_genes[1:10]
print(top_10_genes)
selected_genes <- c("NPR1", "KCNIP2", "CD300LG", "RDH5",
"CIDEC", "GPR146", "BTNL9", "SDPR", "GPAM", "ITIH5")
# Calculate correlation with EBF1
correlations <- sapply(selected_genes, function(gene) {
cor(data_no_class[, gene], data_no_class[, "EBF1"])
})
# Create a data frame to display the results
correlation_df <- data.frame(Gene = selected_genes, Correlation_with_EBF1 = correlations)
correlation_df
library(bnlearn)
nvar <- ncol(data_no_class)
#learn the markov blanket
MB.ABCA9=learn.mb(data_no_class, "ABCA9", method="iamb", alpha=0.01)
MB.ABCA9
# Calculate the mean of each column
column_means <- colMeans(data_no_class)
# Calculate global mean
global_mean <- mean(column_means)
# Print the mean of each column
print(global_mean)
# Binarization using global mean as threshold
binary_data <- data_no_class > global_mean
# Convert TRUE to 1 and FALSE to 0
binary_data <- ifelse(binary_data, 1, 0)
combined_data <- cbind(binary_data, class =
ifelse(data$class == "C", 1, 0))
pcS <- pcSelect(combined_data[,"class"], binary_data, alpha=0.05)
pcS
selected_vars <- names(pcS$G)[pcS$G == TRUE]
selected_vars
combined_data <- as.data.frame(combined_data)
combined_data$class <- as.factor(combined_data$class)
data_class_0 <- combined_data[combined_data$class == 0, ]
data_class_1 <- combined_data[combined_data$class == 1, ]
set.seed(123)
train_data_class_0 <- data_class_0[sample(1:nrow(data_class_0),
0.7 * nrow(data_class_0)), ]
train_data_class_1 <- data_class_1[sample(1:nrow(data_class_1),
0.7 * nrow(data_class_1)), ]
train_data <- rbind(train_data_class_0, train_data_class_1)
test_data <- combined_data[!rownames(combined_data) %in% rownames(train_data), ]
library(e1071)
# Use train_data for training
model <- naiveBayes(class ~ ., data=train_data)
predictions <- predict(model, newdata =
test_data[,-which(names(test_data) == "class")])
conf_matrix <- table(predictions, test_data$class)
print(conf_matrix)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy: ", round(accuracy, 3)))
train_data_selected <- train_data[, c("class", selected_vars)]
test_data_selected <- test_data[, c("class", selected_vars)]
model_pc <- naiveBayes(class ~ ., data=train_data_selected)
predictions_selected <-
predict(model_pc, newdata =
test_data_selected[,-which(names(test_data_selected) == "class")])
conf_matrix_selected <- table(predictions_selected, test_data_selected$class)
print(conf_matrix_selected)
accuracy_selected <- sum(diag(conf_matrix_selected)) / sum(conf_matrix_selected)
print(paste("Accuracy: ", round(accuracy_selected, 3)))
# Calculate the conditional probability table of BTNL9 node
# P(BTNL9 | parent nodes)
# Calculate P(BTNL9 = 0)
p_btnl9_0 <- sum(combined_data$BTNL9 == 0) / nrow(combined_data)
# Calculate P(BTNL9 = 1)
p_btnl9_1 <- sum(combined_data$BTNL9 == 1) / nrow(combined_data)
# Create a data frame to store the probabilities
prob_table_btnl <- data.frame(
BTNL9 = c(0, 1),
Probability = c(p_btnl9_0, p_btnl9_1)
)
# Print the table
print(prob_table_btnl)
# Calculate the conditional probability table from BTNL9 to CD300LG
# P(CD300LG | BTNL9)
# Calculate P(CD300LG = 0 | BTNL9 = 0)
p_cd300lg_0_given_btnl9_0 <- sum(combined_data$CD300LG == 0 &
combined_data$BTNL9 == 0) /
sum(combined_data$BTNL9 == 0)
# Calculate P(CD300LG = 1 | BTNL9 = 0)
p_cd300lg_1_given_btnl9_0 <- sum(combined_data$CD300LG == 1 &
combined_data$BTNL9 == 0) /
sum(combined_data$BTNL9 == 0)
# Calculate P(CD300LG = 0 | BTNL9 = 1)
p_cd300lg_0_given_btnl9_1 <- sum(combined_data$CD300LG == 0 &
combined_data$BTNL9 == 1) /
sum(combined_data$BTNL9 == 1)
# Calculate P(CD300LG = 1 | BTNL9 = 1)
p_cd300lg_1_given_btnl9_1 <- sum(combined_data$CD300LG == 1 &
combined_data$BTNL9 == 1) /
sum(combined_data$BTNL9 == 1)
# Create a data frame to store the conditional probabilities for CD300LG given BTNL9
prob_table_cd300lg <- data.frame(
BTNL9 = c(0, 0, 1, 1),
CD300LG = c(0, 1, 0, 1),
Probability = c(p_cd300lg_0_given_btnl9_0,
p_cd300lg_1_given_btnl9_0,
p_cd300lg_0_given_btnl9_1,
p_cd300lg_1_given_btnl9_1)
)
# Print the table
print(prob_table_cd300lg)
# Calculate the conditional probability table of class nodes
# P(class | CD300LG)
# Calculate P(class = 0 | CD300LG = 0)
p_class_0_given_cd300lg_0 <- sum(combined_data$class == "0" &
combined_data$CD300LG == 0) /
sum(combined_data$CD300LG == 0)
# Calculate P(class = 1 | CD300LG = 0)
p_class_1_given_cd300lg_0 <- sum(combined_data$class == "1" &
combined_data$CD300LG == 0) /
sum(combined_data$CD300LG == 0)
# Calculate P(class = 0 | CD300LG = 1)
p_class_0_given_cd300lg_1 <- sum(combined_data$class == "0" &
combined_data$CD300LG == 1) /
sum(combined_data$CD300LG == 1)
# Calculate P(class = 1 | CD300LG = 1)
p_class_1_given_cd300lg_1 <- sum(combined_data$class == "1" &
combined_data$CD300LG == 1) /
sum(combined_data$CD300LG == 1)
# Create a data frame for the calculated probabilities
conditional_probabilities <- data.frame(
CD300LG = c(0, 0, 1, 1),
class = c(0, 1, 0, 1),
Probability = c(p_class_0_given_cd300lg_0,
p_class_1_given_cd300lg_0,
p_class_0_given_cd300lg_1,
p_class_1_given_cd300lg_1)
)
# Print the data frame
print(conditional_probabilities)
# Calculate the conditional probability table of IGSF10 node
# P(IGSF10 | class)
# Calculate P(IGSF10 = 0 | class = 0)
p_igsf10_0_given_class_0 <- sum(combined_data$IGSF10 == 0 &
combined_data$class == "0") /
sum(combined_data$class == "0")
# Calculate P(IGSF10 = 1 | class = 0)
p_igsf10_1_given_class_0 <- sum(combined_data$IGSF10 == 1 &
combined_data$class == "0") /
sum(combined_data$class == "0")
# Calculate P(IGSF10 = 0 | class = 1)
p_igsf10_0_given_class_1 <- sum(combined_data$IGSF10 == 0 &
combined_data$class == "1") /
sum(combined_data$class == "1")
# Calculate P(IGSF10 = 1 | class = 1)
p_igsf10_1_given_class_1 <- sum(combined_data$IGSF10 == 1 &
combined_data$class == "1") /
sum(combined_data$class == "1")
# Create a data frame to store the conditional probabilities for class given CD300LG
prob_table_class <- data.frame(
CD300LG = c(0, 0, 1, 1),
class = c(0, 1, 0, 1),
Probability = c(p_class_0_given_cd300lg_0,
p_class_1_given_cd300lg_0,
p_class_0_given_cd300lg_1,
p_class_1_given_cd300lg_1)
)
# Print the table
print(prob_table_class)
# Calculate the conditional probability table of ABCA9 node
# P(ABCA9 | BTNL9, IGSF10)
# Calculate P(ABCA9 = 0 | BTNL9 = 0, IGSF10 = 0)
p_abca9_0_given_btnl9_0_igsf10_0 <- sum(combined_data$ABCA9 == 0 &
combined_data$BTNL9 == 0 &
combined_data$IGSF10 == 0) /
sum(combined_data$BTNL9 == 0 & combined_data$IGSF10 == 0)
# Calculate P(ABCA9 = 1 | BTNL9 = 0, IGSF10 = 0)
p_abca9_1_given_btnl9_0_igsf10_0 <- sum(combined_data$ABCA9 == 1 &
combined_data$BTNL9 == 0 &
combined_data$IGSF10 == 0) /
sum(combined_data$BTNL9 == 0 & combined_data$IGSF10 == 0)
# Calculate P(ABCA9 = 0 | BTNL9 = 1, IGSF10 = 0)
p_abca9_0_given_btnl9_1_igsf10_0 <- sum(combined_data$ABCA9 == 0 &
combined_data$BTNL9 == 1 &
combined_data$IGSF10 == 0) /
sum(combined_data$BTNL9 == 1 & combined_data$IGSF10 == 0)
# Calculate P(ABCA9 = 1 | BTNL9 = 1, IGSF10 = 0)
p_abca9_1_given_btnl9_1_igsf10_0 <- sum(combined_data$ABCA9 == 1 &
combined_data$BTNL9 == 1 &
combined_data$IGSF10 == 0) /
sum(combined_data$BTNL9 == 1 & combined_data$IGSF10 == 0)
# Calculate P(ABCA9 = 0 | BTNL9 = 0, IGSF10 = 1)
p_abca9_0_given_btnl9_0_igsf10_1 <- sum(combined_data$ABCA9 == 0 &
combined_data$BTNL9 == 0 &
combined_data$IGSF10 == 1) /
sum(combined_data$BTNL9 == 0 & combined_data$IGSF10 == 1)
# Calculate P(ABCA9 = 1 | BTNL9 = 0, IGSF10 = 1)
p_abca9_1_given_btnl9_0_igsf10_1 <- sum(combined_data$ABCA9 == 1 &
combined_data$BTNL9 == 0 &
combined_data$IGSF10 == 1) /
sum(combined_data$BTNL9 == 0 & combined_data$IGSF10 == 1)
# Calculate P(ABCA9 = 0 | BTNL9 = 1, IGSF10 = 1)
p_abca9_0_given_btnl9_1_igsf10_1 <- sum(combined_data$ABCA9 == 0 &
combined_data$BTNL9 == 1 &
combined_data$IGSF10 == 1) /
sum(combined_data$BTNL9 == 1 & combined_data$IGSF10 == 1)
# Calculate P(ABCA9 = 1 | BTNL9 = 1, IGSF10 = 1)
p_abca9_1_given_btnl9_1_igsf10_1 <- sum(combined_data$ABCA9 == 1 &
combined_data$BTNL9 == 1 &
combined_data$IGSF10 == 1) /
sum(combined_data$BTNL9 == 1 & combined_data$IGSF10 == 1)
# Create a data frame to store the conditional probabilities for ABCA9 given BTNL9 and IGSF10
prob_table_abca9 <- data.frame(
BTNL9 = c(0, 0, 1, 1, 0, 0, 1, 1),
IGSF10 = c(0, 0, 0, 0, 1, 1, 1, 1),
ABCA9 = c(0, 1, 0, 1, 0, 1, 0, 1),
Probability = c(p_abca9_0_given_btnl9_0_igsf10_0,
p_abca9_1_given_btnl9_0_igsf10_0,
p_abca9_0_given_btnl9_1_igsf10_0,
p_abca9_1_given_btnl9_1_igsf10_0,
p_abca9_0_given_btnl9_0_igsf10_1,
p_abca9_1_given_btnl9_0_igsf10_1,
p_abca9_0_given_btnl9_1_igsf10_1,
p_abca9_1_given_btnl9_1_igsf10_1)
)
# Print the table
print(prob_table_abca9)
# Given conditional probabilities
p_btnl9_1 <- 0.1790429
p_cd300lg_1_given_btnl9_1 <- 0.640553
# Calculate P(IGSF10 = 1 | class)
p_class_0_given_cd300lg_1 <- 0.7414966
p_class_1_given_cd300lg_1 <- 0.2585034
p_igsf10_1_given_class_0 <- 0.875
p_igsf10_1_given_class_1 <- 0.06454545
p_igsf10_1_given_cd300lg_1 <- p_class_0_given_cd300lg_1 *
p_igsf10_1_given_class_0 + p_class_1_given_cd300lg_1 *
p_igsf10_1_given_class_1
# P(ABCA9 = 1 | BTNL9 = 1, IGSF10 = 1)
p_abca9_1_given_btnl9_1_igsf10_1 <- 0.9661017
# Calculate joint probability
p_all_high <- p_btnl9_1 * p_cd300lg_1_given_btnl9_1 *
p_igsf10_1_given_cd300lg_1 *
p_abca9_1_given_btnl9_1_igsf10_1
cat("P(BTNL9 = 1, CD300LG = 1, IGSF10 = 1, ABCA9 = 1):", p_all_high, "\n")
p_cd300lg_1_given_btnl9_0 <- 0.008040201
p_class_1_given_cd300lg_1 <- 0.2585034
p_class_1_given_cd300lg_1_and_btnl9_0 <-
p_class_1_given_cd300lg_1 * p_cd300lg_1_given_btnl9_0
print(p_class_1_given_cd300lg_1_and_btnl9_0)
