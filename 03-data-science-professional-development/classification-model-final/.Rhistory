data <- read.csv("melb_housing_filtered3.csv")
data <- data.frame(data)
head(data)
names(data)
str(data)
# Select specific columns to convert to factors and then to numeric
columns_to_convert <- c("SUBURB", "ADDRESS", "TYPE", "METHOD", "SELLERG", "DATE", "COUNCILARE", "REGIONNAME")
for (col in columns_to_convert) {
new_col_name <- paste0(col, "_num")
data[[new_col_name]] <- as.numeric(factor(data[[col]]))
}
# Print the resulting data frame
head(data, 10)
str(data)
s_data <- data[, c("SUBURB", "SUBURB_num")]
unique(s_data)
# Select and display only two columns
t_data <- data[, c("TYPE", "TYPE_num")]
unique(t_data)
# Select and display only two columns
m_data <- data[, c("METHOD", "METHOD_num")]
unique(m_data)
# Select and display only two columns
sg_data <- data[, c("SELLERG", "SELLERG_num")]
unique(sg_data)
# Select and display only two columns
ca_data <- data[, c("COUNCILARE", "COUNCILARE_num")]
unique(ca_data)
# Select and display only two columns
r_data <- data[, c("REGIONNAME", "REGIONNAME_num")]
unique(r_data)
library(dplyr)
# Convert the "Date" column to a Date object
data$Date <- as.Date(data$DATE, format = "%d/%m/%Y")
data <- na.omit(data)
# Convert the "Date" column to a numeric representation (number of days)
data$DateNumeric <- as.numeric(data$Date)
library(bnlearn)
library(pcalg)
# Select columns with numeric or integer values
numeric_vars <- names(data)[sapply(data, is.numeric) | sapply(data, is.integer)]
# Access data from the selected columns
num_data <- data[numeric_vars]
# Extract only the numeric columns from the data frame
num_data <- data[, numeric_vars]
# Convert the entire num_data data frame to numeric
num_data <- as.data.frame(lapply(num_data, as.numeric))
# Check for missing values in the numeric variables
missing_values <- sapply(num_data, function(x) any(is.na(x)))
# Perform structure learning
if (require(pcalg)) {
pc.fit <- pc(suffStat = list(C = cor(num_data), n = nrow(num_data)),
indepTest = gaussCItest, alpha = 0.01, labels = colnames(num_data))
# Plot the estimated graph
if (require(Rgraphviz)) {
plot(pc.fit, main = "Estimated graph")
}
}
options(scipen = 999)
# Initialize a data frame to store causal effects
results <- data.frame()
data_no_price <- num_data[, -which(names(num_data) == "PRICE")]
# Iterate through other genes and estimate causal effects
for (colname in names(data_no_price)) {
if (colname != "PRICE") {
causal_effect <- min(abs(idaFast(match(colname,names(num_data)), match("PRICE",names(num_data)),
cov(num_data), pc.fit@graph)))
# Store the absolute value of the causal effect
gene_result <-data.frame(variable=colname,causality=causal_effect)
# Add the gene and its absolute causal effect to the data frame
results<- rbind(results, gene_result)
print(paste(gene_result)) } }
# Rank genes based on the absolute values of their causal effects
top_10 <- results[order(-results$causality), ]
# Print the top 10 genes with strong causal effects on EBF1
#print("Top 10 genes with strong causal effects on EBF1:",top_10_genes)
# Print the top 10 genes with strong causal effects on EBF1
cat("Top 10 genes with strong causal effects on EBF1:\n")
print(top_10)
num_h <- num_data[num_data$TYPE_num == 1, ]
MB_h <- learn.mb(data.frame(num_h),"price_by_area"
,method = "iamb", alpha = 0.05)
MB_h
length(MB_h)
h_data <- num_h[, names(num_h) %in% MB_h]
h_data <- mutate(h_data, PRICE = num_h$PRICE, price_by_area = num_h$price_by_area)
head(h_data,5)
num_u <- num_data[num_data$TYPE_num == 3, ]
MB_u <- learn.mb(data.frame(num_u),"price_by_area"
,method = "iamb", alpha = 0.05)
MB_u
length(MB_u)
u_data <- num_u[, names(num_u) %in% MB_u]
u_data <- mutate(u_data, PRICE = num_u$PRICE, price_by_area = num_u$price_by_area)
head(u_data,5)
num_t <- num_data[num_data$TYPE_num == 2, ]
MB_t <- learn.mb(data.frame(num_t),"price_by_area"
,method = "iamb", alpha = 0.05)
MB_t
length(MB_t)
t_data <- num_t[, names(num_t) %in% MB_t]
t_data <- mutate(t_data, PRICE = num_t$PRICE, price_by_area = num_t$price_by_area)
head(t_data,5)
#####new
# Function to clean and discretize columns
clean_and_discretize <- function(data, num_bins) {
# Iterate through all columns in the data frame
for (col in names(data)) {
# Check if the column is numeric
if (is.numeric(data[[col]])) {
# If it's numeric, discretize it
data <- data %>% mutate(across(all_of(col), ~ cut(., breaks = num_bins, labels = FALSE), .names = "discrete_{.col}"))
} else {
# If it's not numeric, attempt to clean it and convert to numeric
data[[col]] <- as.numeric(gsub("[^0-9.]", "", data[[col]]))
if (!any(is.na(data[[col]]))) {
# If the column is successfully converted to numeric, discretize it
data <- data %>% mutate(across(all_of(col), ~ cut(., breaks = num_bins, labels = FALSE), .names = "discrete_{.col}"))
}
}
}
return(data)
}
# Define the number of bins
num_bins <- 5
# Clean and discretize the h_data DataFrame
h_data_discrete <- clean_and_discretize(h_data, num_bins)
# Clean and discretize the u_data DataFrame
u_data_discrete <- clean_and_discretize(u_data, num_bins)
# Clean and discretize the t_data DataFrame
t_data_discrete <- clean_and_discretize(t_data, num_bins)
# List of data frames
data_frames <- list(h_data_discrete, u_data_discrete, t_data_discrete)
# Function to convert columns to factors and keep only the "discrete_" columns
convert_to_factors_and_keep <- function(data_frame) {
discrete_columns <- grep("^discrete_", names(data_frame), value = TRUE)
data_frame <- data_frame[discrete_columns]
data_frame <- lapply(data_frame, as.factor)
data_frame <- as.data.frame(data_frame)
return(data_frame)
}
# Apply the function to each data frame
data_frames <- lapply(data_frames, convert_to_factors_and_keep)
# Assign the modified data frames back to their original variables
h_data_discrete <- data_frames[[1]]
u_data_discrete <- data_frames[[2]]
t_data_discrete <- data_frames[[3]]
# Check if they are data frames
is.data.frame(h_data_discrete)
is.data.frame(u_data_discrete)
is.data.frame(t_data_discrete)
# Perform structure learning and parameter learning
structure_h <- hc(h_data_discrete)
model_h <- bn.fit(structure_h, data = h_data_discrete, method = "mle")
structure_u <- hc(u_data_discrete)
model_u <- bn.fit(structure_u, data = u_data_discrete, method = "mle")
structure_t <- hc(t_data_discrete)
model_t <- bn.fit(structure_t, data = t_data_discrete, method = "mle")
# Print the Bayesian network models
print(model_h)
print(model_u)
print(model_t)
# Plot the Bayesian network model
# Customize the font size for node names
#graph.par(fontsize = 25)  # Adjust the font size as needed
#graphviz.plot(structure)
# Customize the appearance of the graph
graph.par(
node.width = 2,      # Adjust the width of the nodes as needed
node.height = 1.5,   # Adjust the height of the nodes as needed
fontsize = 250        # Adjust the font size of node names
)
# Plot the Bayesian network with custom attributes
graphviz.plot(structure_h,fontsize=20)
graphviz.plot(structure_h)
graphviz.plot(structure_u)
graphviz.plot(structure_t)
# Perform structure learning and parameter learning
structure_h <- hc(h_data_discrete)
model_h <- bn.fit(structure_h, data = h_data_discrete, method = "mle")
structure_u <- hc(u_data_discrete)
model_u <- bn.fit(structure_u, data = u_data_discrete, method = "mle")
structure_t <- hc(t_data_discrete)
model_t <- bn.fit(structure_t, data = t_data_discrete, method = "mle")
# Save Bayesian network models as PNG images
png("model_h1.png", width = 1200, height = 1000, res=1000)  # Adjust width and height as needed
graphviz.plot(structure_h)
# Perform structure learning and parameter learning
structure_h <- hc(h_data_discrete)
model_h <- bn.fit(structure_h, data = h_data_discrete, method = "mle")
structure_u <- hc(u_data_discrete)
model_u <- bn.fit(structure_u, data = u_data_discrete, method = "mle")
structure_t <- hc(t_data_discrete)
model_t <- bn.fit(structure_t, data = t_data_discrete, method = "mle")
# Set up larger plot area
par(mfrow = c(1, 1), mar = c(5, 5, 4, 2))
# Save Bayesian network models as high-resolution PNG images with adjusted node attributes
png("model_h.png", width = 1000, height = 1000, res = 500)  # Adjust width, height, and res as needed
graphviz.plot(structure_h, nodeAttrs = list(fontsize = 12, shape = "ellipse", width = 0.5, height = 0.5))
# Perform structure learning and parameter learning
structure_h <- hc(h_data_discrete)
model_h <- bn.fit(structure_h, data = h_data_discrete, method = "mle")
structure_u <- hc(u_data_discrete)
model_u <- bn.fit(structure_u, data = u_data_discrete, method = "mle")
structure_t <- hc(t_data_discrete)
model_t <- bn.fit(structure_t, data = t_data_discrete, method = "mle")
# Create a DOT file with adjusted node attributes
writeLines("digraph G {", "model_h.dot")
cat('graph [dpi=500];', file = "model_h.dot", append = TRUE)
cat('node [fontsize=12, shape=ellipse, width=0.5, height=0.5];', file = "model_h.dot", append = TRUE)
cat(model_h, file = "model_h.dot", append = TRUE)
